{
  "name": "seo agent:II",
  "nodes": [
    {
      "parameters": {
        "resource": "spreadsheet",
        "title": "={{ $json.URL.split(\"/\").filter(Boolean).pop() }}",
        "sheetsUi": {
          "sheetValues": [
            {
              "title": "SERP Analysis"
            },
            {
              "title": "FAQs"
            },
            {
              "title": "Related Searches"
            },
            {
              "title": "Base Performance"
            },
            {
              "title": "Position Distriibution"
            },
            {
              "title": "Query Opportunities"
            },
            {
              "title": "Keyword Tracking"
            },
            {
              "title": "Index Status & Pagespeed"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -12180,
        2840
      ],
      "id": "53b4667c-f6a1-41c0-8648-8a228090a172",
      "name": "Create Report Sheet1",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fK8lELKZIRzBTDHa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "basicAuth",
        "formTitle": "Form",
        "formDescription": "Please fill the neccessary details here",
        "formFields": {
          "values": [
            {
              "fieldLabel": "URL",
              "requiredField": true
            },
            {
              "fieldLabel": "Focus Keyword"
            },
            {
              "fieldLabel": "Country"
            },
            {
              "fieldLabel": "Period Length"
            },
            {
              "fieldLabel": "Target Keywords"
            },
            {
              "fieldLabel": "Language"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -12680,
        2660
      ],
      "id": "13a25806-b1a0-4cb2-ba62-285533ae123d",
      "name": "On form submission1",
      "webhookId": "fa3a0953-6d2e-4ff9-8af3-8c6af6e0313e",
      "notesInFlow": false,
      "credentials": {
        "httpBasicAuth": {
          "id": "HZxjbRNcJtsF9ccl",
          "name": "form01credential"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "19cNAlg-JfBuZBOyqfvQFl97D0wL6oVwyByt4cPz1hgA",
          "mode": "list",
          "cachedResultName": "n8n_SEO_Agent_Config",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19cNAlg-JfBuZBOyqfvQFl97D0wL6oVwyByt4cPz1hgA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Domains",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19cNAlg-JfBuZBOyqfvQFl97D0wL6oVwyByt4cPz1hgA/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -12140,
        2400
      ],
      "id": "7368d9f6-69f8-4baa-8de3-79f417b4cafe",
      "name": "Get BigQuery Table Names1",
      "retryOnFail": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fK8lELKZIRzBTDHa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "19cNAlg-JfBuZBOyqfvQFl97D0wL6oVwyByt4cPz1hgA",
          "mode": "list",
          "cachedResultName": "n8n_SEO_Agent_Config",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19cNAlg-JfBuZBOyqfvQFl97D0wL6oVwyByt4cPz1hgA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1408812802,
          "mode": "list",
          "cachedResultName": "Articles",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/19cNAlg-JfBuZBOyqfvQFl97D0wL6oVwyByt4cPz1hgA/edit#gid=1408812802"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "url",
              "lookupValue": "={{ $json.URL }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -12340,
        2640
      ],
      "id": "f8f68d21-e8bd-4d64-92ce-fe4d37673c07",
      "name": "Get Article Metadata1",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fK8lELKZIRzBTDHa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Trigger Workflow",
        "height": 640,
        "width": 320,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -12840,
        2400
      ],
      "id": "595206e8-b9f9-4ab0-842c-4e2cc23afd1a",
      "name": "Sticky Note24"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -11600,
        2640
      ],
      "id": "e3da12f9-a152-40b3-8873-bcba497e0cef",
      "name": "Merge Workflow Data1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "content": "# SERP Analysis\n",
        "height": 2000,
        "width": 3640,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -10180,
        0
      ],
      "id": "a11b8643-933a-4416-a22e-c0f29ef30467",
      "name": "Sticky Note7",
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Analyze Competitors",
        "height": 540,
        "width": 2120,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -9080,
        1200
      ],
      "id": "75fa1386-16f8-445f-bbb7-d7f798173f32",
      "name": "Sticky Note8",
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Get SERPs",
        "height": 1500,
        "width": 680,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -10080,
        140
      ],
      "id": "8635082e-dde8-4d9e-a232-e272220a1b94",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "# Insert Related Searches\n",
        "height": 360,
        "width": 1700,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -9180,
        420
      ],
      "id": "d74c185e-04f1-49c2-b9be-4012b948732f",
      "name": "Sticky Note10",
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Insert FAQs",
        "height": 380,
        "width": 1600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -9080,
        800
      ],
      "id": "96920f29-75d9-4024-aebf-c5c24f5cfd0b",
      "name": "Sticky Note11",
      "disabled": true
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "GPT-4.1"
        },
        "messages": {
          "values": [
            {
              "content": "You are an SEO specialist and your task is to analyze our competitors' articles. The ultimate goal is to write an article that is better than the competition's article. Furthermore, you are familiar with Markdown and are able to extract only relevant content.",
              "role": "system"
            },
            {
              "content": "=Your task is to analyze the following article content: {{ $json.result.cleaned_html }}\n\nProvide me with the following information:\n\n- Short Summary\n- title\n- Potential Focus Keyword\n- Relevant Long-Tail Keywords\n- N-Gram Analysis\n\nYou MUST ALWAYS use the following exact keys for your response:\nshort_summary\ntitle\npotential_focus_keyword\nrelevant_long_tail_keywords\nn_gram_analysis (containing unigrams, bigrams, and trigrams)"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -7820,
        1520
      ],
      "id": "8f3f31db-89ab-4ca3-997d-5b6a4227d8d9",
      "name": "Analyze Content",
      "credentials": {
        "openAiApi": {
          "id": "EIPdk61I9qMM3ghW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://serpapi.com/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.focus_keyword }}"
            },
            {
              "name": "gl",
              "value": "={{ $json.country }}"
            },
            {
              "name": "device",
              "value": "mobile"
            },
            {
              "name": "api_key",
              "value": "a464b275f1a78f186a4cc06dca960918cf54f45a917bdb3934c77479fcbd1b99d"
            },
            {
              "name": "engine",
              "value": "google"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -10020,
        460
      ],
      "id": "a5764fbe-863d-48a5-98cb-502c0c02fce8",
      "name": "Get Mobile SERPs",
      "retryOnFail": true,
      "executeOnce": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "url": "https://serpapi.com/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "={{ $json.focus_keyword }}"
            },
            {
              "name": "gl",
              "value": "={{ $json.country }}"
            },
            {
              "name": "device",
              "value": "desktop"
            },
            {
              "name": "engine",
              "value": "google"
            },
            {
              "name": "api_key",
              "value": "a464b275f1a78f186a4cc06dca960918cf54f45a917bdb393479fcbd1b8d"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -10040,
        720
      ],
      "id": "2eb815df-3029-4e5a-a4c7-bce577088b89",
      "name": "Get Desktop SERPs",
      "executeOnce": true,
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "jsCode": "// Create an array to hold the cleaned items\nconst cleanedArray = [];\n\n// Loop through all input items\nfor (const item of $input.all()) {\n  // Create a copy of the item's JSON\n  const cleanedItem = {...item.json};\n  \n  // Filter organic results to remove any with youtube.com in the link\n  if (cleanedItem.organic) {\n    cleanedItem.organic = cleanedItem.organic.filter(result => \n      !result.link.includes('youtube.com')\n    );\n    \n    // Also filter any sitelinks that might contain youtube.com\n    for (const result of cleanedItem.organic) {\n      if (result.sitelinks) {\n        result.sitelinks = result.sitelinks.filter(sitelink => \n          !sitelink.link.includes('youtube.com')\n        );\n      }\n    }\n  }\n  \n  // Filter related searches if needed\n  if (cleanedItem.relatedSearches) {\n    cleanedItem.relatedSearches = cleanedItem.relatedSearches.filter(search => \n      !search.query.includes('youtube.com')\n    );\n  }\n  \n  // Add the cleaned item to our array\n  cleanedArray.push(cleanedItem);\n}\n\n// Return the cleaned array\nreturn cleanedArray;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -9800,
        460
      ],
      "id": "c3d932da-e193-4c35-8e1a-c49586f2e9d0",
      "name": "Parse Data #1"
    },
    {
      "parameters": {
        "jsCode": "// Create an array to hold the cleaned items\nconst cleanedArray = [];\n\n// Loop through all input items\nfor (const item of $input.all()) {\n  // Create a copy of the item's JSON\n  const cleanedItem = {...item.json};\n  \n  // Filter organic results to remove any with youtube.com in the link\n  if (cleanedItem.organic) {\n    cleanedItem.organic = cleanedItem.organic.filter(result => \n      !result.link.includes('youtube.com')\n    );\n    \n    // Also filter any sitelinks that might contain youtube.com\n    for (const result of cleanedItem.organic) {\n      if (result.sitelinks) {\n        result.sitelinks = result.sitelinks.filter(sitelink => \n          !sitelink.link.includes('youtube.com')\n        );\n      }\n    }\n  }\n  \n  // Filter related searches if needed\n  if (cleanedItem.relatedSearches) {\n    cleanedItem.relatedSearches = cleanedItem.relatedSearches.filter(search => \n      !search.query.includes('youtube.com')\n    );\n  }\n  \n  // Add the cleaned item to our array\n  cleanedArray.push(cleanedItem);\n}\n\n// Return the cleaned array\nreturn cleanedArray;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -9820,
        780
      ],
      "id": "6b16dcf9-a362-48f5-86cc-cde0a9932f0c",
      "name": "Parse Data #7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0e112e59-ad43-4321-9de0-d1d502f98266",
              "name": "related_questions",
              "value": "={{ $json.related_questions || []}}",
              "type": "array"
            },
            {
              "id": "d9e82a4b-3c94-4a95-9c8e-7a2738187e5f",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -9040,
        920
      ],
      "id": "7c660c05-9b09-4805-8d28-89169263ac99",
      "name": "Get FAQs Mobile",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fcf16964-061d-4c9e-82c6-954e769e899c",
              "name": "organic_results",
              "value": "={{ $json.organic || $json.organic_results || [] }}",
              "type": "array"
            },
            {
              "id": "44fba0e5-686c-4475-89dd-66f711bf910c",
              "name": "search_parameters.device",
              "value": "={{ $json.search_parameters.device }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -9560,
        620
      ],
      "id": "62f74b16-9582-4f09-a854-f5fba45b2f8e",
      "name": "Get Orgnaic Results Mobile"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e76a9070-4782-4a54-84b6-bce1eb50023d",
              "name": "organic_results",
              "value": "={{$json.organic_results ||  $json.organic ||  []}}",
              "type": "array"
            },
            {
              "id": "64fffe61-bb13-47e6-9555-c8adb9c3762d",
              "name": "search_parameters.device",
              "value": "={{ $json.searchParameters.device }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -9580,
        840
      ],
      "id": "34eb5e07-8f73-4bb7-a962-0847c1e86143",
      "name": "Get Organic Results Desktop"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0e112e59-ad43-4321-9de0-d1d502f98266",
              "name": "related_questions",
              "value": "={{ $json.related_questions || []}}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -9600,
        1140
      ],
      "id": "cdca9c35-c77e-43db-9ab3-6d22478ff3fd",
      "name": "Get FAQs Desktop"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0e112e59-ad43-4321-9de0-d1d502f98266",
              "name": "related_searches",
              "value": "={{ $json.related_searches || [] }}",
              "type": "array"
            },
            {
              "id": "b941aaa7-6123-4494-b63d-20228729e0bb",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -9580,
        1380
      ],
      "id": "23d59c8a-8890-4f04-aae4-8d635fd6c52a",
      "name": "Get Related Searches Desktop"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0e112e59-ad43-4321-9de0-d1d502f98266",
              "name": "related_searches",
              "value": "={{ $json.related_searches || [] }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -9060,
        560
      ],
      "id": "d51ebb84-497b-484f-8c53-b02019681a98",
      "name": "Get Related Searches Mobile"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $items(\"Create Report Sheet1\")[0].json.spreadsheetId}}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $items('Create Report Sheet1')[0].json.sheets[2].properties.title || \"Related Searches\"}}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "query"
          ],
          "schema": [
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -8060,
        580
      ],
      "id": "d7dd4684-0a8b-4590-a671-e59d16363f02",
      "name": "Insert Related Searches",
      "alwaysOutputData": true,
      "notesInFlow": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fK8lELKZIRzBTDHa",
          "name": "Google Sheets account"
        }
      },
      "notes": "No related search found on web for your focus keyword."
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        -8360,
        580
      ],
      "id": "1b7f7124-3987-40a5-8c7b-b720357ca226",
      "name": "Remove Duplicated Searches",
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -8860,
        580
      ],
      "id": "229b43d3-3fe9-49af-8800-f92b90a57c66",
      "name": "Merge Related Searches"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -8780,
        920
      ],
      "id": "85264221-fcb5-482f-9167-acf4697bcd69",
      "name": "Merge FAQs",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "related_questions",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -8600,
        920
      ],
      "id": "45248bc2-9bf6-4d46-82c3-fb17fcf74755",
      "name": "Get Questions",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "compare": "selectedFields",
        "fieldsToCompare": "question",
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        -8180,
        900
      ],
      "id": "7eb6bd49-70f4-4dc7-814d-2892db5c0179",
      "name": "Remove Duplicated Questions",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{  $items(\"Create Report Sheet1\")[0].json.spreadsheetId}}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $items('Create Report Sheet1')[0].json.sheets[1].properties.title || \"FAQs\"}}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "question",
              "displayName": "question",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "type",
              "displayName": "type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "snippet",
              "displayName": "snippet",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "link",
              "displayName": "link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "thumbnail",
              "displayName": "thumbnail",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "source_logo",
              "displayName": "source_logo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "next_page_token",
              "displayName": "next_page_token",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "serpapi_link",
              "displayName": "serpapi_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "date",
              "displayName": "date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "text_blocks",
              "displayName": "text_blocks",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "references",
              "displayName": "references",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "displayed_link",
              "displayName": "displayed_link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -7900,
        920
      ],
      "id": "e94f5fd9-537f-4896-afc5-e512af44d6ab",
      "name": "Insert FAQs",
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fK8lELKZIRzBTDHa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "query",
              "renameField": true,
              "outputFieldName": "related_searches"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -7840,
        580
      ],
      "id": "f4615e22-a5b3-4d09-b57f-8c6be218467a",
      "name": "Set Key #4"
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "question",
              "renameField": true,
              "outputFieldName": "faqs"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -7680,
        920
      ],
      "id": "8c161567-af11-45f4-a1ff-652571a3d744",
      "name": "Set Key #6",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "maxItems": 5
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -9040,
        1320
      ],
      "id": "42b555c3-51f0-4c11-8217-51b49672f97c",
      "name": "Top N Mobile Pages"
    },
    {
      "parameters": {
        "maxItems": 5
      },
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -9040,
        1520
      ],
      "id": "b11b5743-4417-457f-82eb-dc2cc979079f",
      "name": "Top N Desktop Pages"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -8820,
        1320
      ],
      "id": "4d53dfb3-2aa8-4b3f-a716-1e127782a9e4",
      "name": "Merge Pages"
    },
    {
      "parameters": {
        "fieldToSplitOut": "=organic_results",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -8600,
        1320
      ],
      "id": "1156d6f5-794d-4b2f-8cb4-9023447ff2db",
      "name": "Get Pages"
    },
    {
      "parameters": {
        "compare": "selectedFields",
        "fieldsToCompare": "link",
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        -8380,
        1320
      ],
      "id": "960968fe-afb7-4447-8a6c-6a17ebe4c2e1",
      "name": "Remove Duplicated Pages"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        -8140,
        1320
      ],
      "id": "014f2eba-731e-497a-a3d5-250355ab000a",
      "name": "Limit Pages"
    },
    {
      "parameters": {
        "fieldToSplitOut": "link, snippet, position, title",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -7940,
        1320
      ],
      "id": "9d5e9211-7300-48fa-94cb-d2340d7fd974",
      "name": "Get Links"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -7380,
        1300
      ],
      "id": "60ba2fb4-da9b-4005-83c6-fb7c11a1e647",
      "name": "Loop Over Pages"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://crawl4ai-pq7zubgvra-el.a.run.app/crawl",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\t\"urls\": [\n\t\t\"{{ $json.link }}\"\n\t]\n}",
        "options": {
          "timeout": 3600000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -8660,
        1540
      ],
      "id": "02bdb649-d172-4f43-84c0-6f166e818c24",
      "name": "Get Page Content"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "4eec2c04-b519-4c06-a911-bb7780b776b5",
              "name": "result.metadata.title",
              "value": "={{ $json.results[0].metadata.title }}",
              "type": "string"
            },
            {
              "id": "0eac8d67-34d9-4809-92fc-69f47381e104",
              "name": "result.metadata.description",
              "value": "={{ $json.results[0].metadata.description }}",
              "type": "string"
            },
            {
              "id": "58b74b11-74f8-42e3-b68f-a2aa4c380578",
              "name": "result.metadata['og:url']",
              "value": "={{ $json.results[0].metadata['og:url'] }}",
              "type": "string"
            },
            {
              "id": "f57680c0-48ed-492f-a1d9-508a0c996198",
              "name": "result.cleaned_html",
              "value": "={{ $json.results[0].cleaned_html }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -8100,
        1520
      ],
      "id": "5bdd4428-f17d-4952-8891-a022041bbb7d",
      "name": "Get Article Metadata #1"
    },
    {
      "parameters": {
        "jsCode": "// Create a new array to store the simplified data\nconst simplifiedData = $input.all().map(item => {\n  const content = item.json.message.content;\n  \n  // Return new object with only the required fields\n  return {\n    summary: content.short_summary,\n    title:content.title,\n    potential_focus_keyword: content.potential_focus_keyword,\n    relevant_long_tail_keywords: content.relevant_long_tail_keywords,\n    n_gram_analysis: content.n_gram_analysis\n  };\n});\n\nreturn simplifiedData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -7340,
        1520
      ],
      "id": "a78cc7be-2a6e-44e3-8607-07253322b8eb",
      "name": "Parse Data #8"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{  $items(\"Create Report Sheet1\")[0].json.spreadsheetId}}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $items(\"Merge Workflow Data1\")[2].json.spreadsheet_meta_data[0].sheets[0].properties.title || \"SERP Analysis\" }}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "potential_focus_keyword",
              "displayName": "potential_focus_keyword",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "relevant_long_tail_keywords",
              "displayName": "relevant_long_tail_keywords",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "n_gram_analysis",
              "displayName": "n_gram_analysis",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -7100,
        1520
      ],
      "id": "1e2848fc-5a9c-4e97-b5b6-ed55cc0beb37",
      "name": "Insert SERP Analysis",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fK8lELKZIRzBTDHa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// This node simply holds the complete list of Google-supported countries and their codes.\n// This data will be used by the 'Parse Data' node to map a full country name to its two-letter code.\nreturn [\n  { \"country_code\": \"af\", \"country_name\": \"Afghanistan\" }, { \"country_code\": \"al\", \"country_name\": \"Albania\" },\n  { \"country_code\": \"dz\", \"country_name\": \"Algeria\" }, { \"country_code\": \"as\", \"country_name\": \"American Samoa\" },\n  { \"country_code\": \"ad\", \"country_name\": \"Andorra\" }, { \"country_code\": \"ao\", \"country_name\": \"Angola\" },\n  { \"country_code\": \"ai\", \"country_name\": \"Anguilla\" }, { \"country_code\": \"aq\", \"country_name\": \"Antarctica\" },\n  { \"country_code\": \"ag\", \"country_name\": \"Antigua and Barbuda\" }, { \"country_code\": \"ar\", \"country_name\": \"Argentina\" },\n  { \"country_code\": \"am\", \"country_name\": \"Armenia\" }, { \"country_code\": \"aw\", \"country_name\": \"Aruba\" },\n  { \"country_code\": \"au\", \"country_name\": \"Australia\" }, { \"country_code\": \"at\", \"country_name\": \"Austria\" },\n  { \"country_code\": \"az\", \"country_name\": \"Azerbaijan\" }, { \"country_code\": \"bs\", \"country_name\": \"Bahamas\" },\n  { \"country_code\": \"bh\", \"country_name\": \"Bahrain\" }, { \"country_code\": \"bd\", \"country_name\": \"Bangladesh\" },\n  { \"country_code\": \"bb\", \"country_name\": \"Barbados\" }, { \"country_code\": \"by\", \"country_name\": \"Belarus\" },\n  { \"country_code\": \"be\", \"country_name\": \"Belgium\" }, { \"country_code\": \"bz\", \"country_name\": \"Belize\" },\n  { \"country_code\": \"bj\", \"country_name\": \"Benin\" }, { \"country_code\": \"bm\", \"country_name\": \"Bermuda\" },\n  { \"country_code\": \"bt\", \"country_name\": \"Bhutan\" }, { \"country_code\": \"bo\", \"country_name\": \"Bolivia\" },\n  { \"country_code\": \"ba\", \"country_name\": \"Bosnia and Herzegovina\" }, { \"country_code\": \"bw\", \"country_name\": \"Botswana\" },\n  { \"country_code\": \"br\", \"country_name\": \"Brazil\" }, { \"country_code\": \"io\", \"country_name\": \"British Indian Ocean Territory\" },\n  { \"country_code\": \"bn\", \"country_name\": \"Brunei Darussalam\" }, { \"country_code\": \"bg\", \"country_name\": \"Bulgaria\" },\n  { \"country_code\": \"bf\", \"country_name\": \"Burkina Faso\" }, { \"country_code\": \"bi\", \"country_name\": \"Burundi\" },\n  { \"country_code\": \"kh\", \"country_name\": \"Cambodia\" }, { \"country_code\": \"cm\", \"country_name\": \"Cameroon\" },\n  { \"country_code\": \"ca\", \"country_name\": \"Canada\" }, { \"country_code\": \"cv\", \"country_name\": \"Cape Verde\" },\n  { \"country_code\": \"ky\", \"country_name\": \"Cayman Islands\" }, { \"country_code\": \"cf\", \"country_name\": \"Central African Republic\" },\n  { \"country_code\": \"td\", \"country_name\": \"Chad\" }, { \"country_code\": \"cl\", \"country_name\": \"Chile\" },\n  { \"country_code\": \"cn\", \"country_name\": \"China\" }, { \"country_code\": \"cx\", \"country_name\": \"Christmas Island\" },\n  { \"country_code\": \"cc\", \"country_name\": \"Cocos (Keeling) Islands\" }, { \"country_code\": \"co\", \"country_name\": \"Colombia\" },\n  { \"country_code\": \"km\", \"country_name\": \"Comoros\" }, { \"country_code\": \"cg\", \"country_name\": \"Congo\" },\n  { \"country_code\": \"cd\", \"country_name\": \"Congo, the Democratic Republic of the\" }, { \"country_code\": \"ck\", \"country_name\": \"Cook Islands\" },\n  { \"country_code\": \"cr\", \"country_name\": \"Costa Rica\" }, { \"country_code\": \"ci\", \"country_name\": \"Cote D'ivoire\" },\n  { \"country_code\": \"hr\", \"country_name\": \"Croatia\" }, { \"country_code\": \"cu\", \"country_name\": \"Cuba\" },\n  { \"country_code\": \"cy\", \"country_name\": \"Cyprus\" }, { \"country_code\": \"cz\", \"country_name\": \"Czech Republic\" },\n  { \"country_code\": \"dk\", \"country_name\": \"Denmark\" }, { \"country_code\": \"dj\", \"country_name\": \"Djibouti\" },\n  { \"country_code\": \"dm\", \"country_name\": \"Dominica\" }, { \"country_code\": \"do\", \"country_name\": \"Dominican Republic\" },\n  { \"country_code\": \"ec\", \"country_name\": \"Ecuador\" }, { \"country_code\": \"eg\", \"country_name\": \"Egypt\" },\n  { \"country_code\": \"sv\", \"country_name\": \"El Salvador\" }, { \"country_code\": \"gq\", \"country_name\": \"Equatorial Guinea\" },\n  { \"country_code\": \"er\", \"country_name\": \"Eritrea\" }, { \"country_code\": \"ee\", \"country_name\": \"Estonia\" },\n  { \"country_code\": \"et\", \"country_name\": \"Ethiopia\" }, { \"country_code\": \"fk\", \"country_name\": \"Falkland Islands (Malvinas)\" },\n  { \"country_code\": \"fo\", \"country_name\": \"Faroe Islands\" }, { \"country_code\": \"fj\", \"country_name\": \"Fiji\" },\n  { \"country_code\": \"fi\", \"country_name\": \"Finland\" }, { \"country_code\": \"fr\", \"country_name\": \"France\" },\n  { \"country_code\": \"gf\", \"country_name\": \"French Guiana\" }, { \"country_code\": \"pf\", \"country_name\": \"French Polynesia\" },\n  { \"country_code\": \"ga\", \"country_name\": \"Gabon\" }, { \"country_code\": \"gm\", \"country_name\": \"Gambia\" },\n  { \"country_code\": \"ge\", \"country_name\": \"Georgia\" }, { \"country_code\": \"de\", \"country_name\": \"Germany\" },\n  { \"country_code\": \"gh\", \"country_name\": \"Ghana\" }, { \"country_code\": \"gi\", \"country_name\": \"Gibraltar\" },\n  { \"country_code\": \"gr\", \"country_name\": \"Greece\" }, { \"country_code\": \"gl\", \"country_name\": \"Greenland\" },\n  { \"country_code\": \"gd\", \"country_name\": \"Grenada\" }, { \"country_code\": \"gp\", \"country_name\": \"Guadeloupe\" },\n  { \"country_code\": \"gu\", \"country_name\": \"Guam\" }, { \"country_code\": \"gt\", \"country_name\": \"Guatemala\" },\n  { \"country_code\": \"gg\", \"country_name\": \"Guernsey\" }, { \"country_code\": \"gn\", \"country_name\": \"Guinea\" },\n  { \"country_code\": \"gw\", \"country_name\": \"Guinea-Bissau\" }, { \"country_code\": \"gy\", \"country_name\": \"Guyana\" },\n  { \"country_code\": \"ht\", \"country_name\": \"Haiti\" }, { \"country_code\": \"va\", \"country_name\": \"Holy See (Vatican City State)\" },\n  { \"country_code\": \"hn\", \"country_name\": \"Honduras\" }, { \"country_code\": \"hk\", \"country_name\": \"Hong Kong\" },\n  { \"country_code\": \"hu\", \"country_name\": \"Hungary\" }, { \"country_code\": \"is\", \"country_name\": \"Iceland\" },\n  { \"country_code\": \"in\", \"country_name\": \"India\" }, { \"country_code\": \"id\", \"country_name\": \"Indonesia\" },\n  { \"country_code\": \"ir\", \"country_name\": \"Iran, Islamic Republic of\" }, { \"country_code\": \"iq\", \"country_name\": \"Iraq\" },\n  { \"country_code\": \"ie\", \"country_name\": \"Ireland\" }, { \"country_code\": \"im\", \"country_name\": \"Isle of Man\" },\n  { \"country_code\": \"il\", \"country_name\": \"Israel\" }, { \"country_code\": \"it\", \"country_name\": \"Italy\" },\n  { \"country_code\": \"jm\", \"country_name\": \"Jamaica\" }, { \"country_code\": \"jp\", \"country_name\": \"Japan\" },\n  { \"country_code\": \"je\", \"country_name\": \"Jersey\" }, { \"country_code\": \"jo\", \"country_name\": \"Jordan\" },\n  { \"country_code\": \"kz\", \"country_name\": \"Kazakhstan\" }, { \"country_code\": \"ke\", \"country_name\": \"Kenya\" },\n  { \"country_code\": \"ki\", \"country_name\": \"Kiribati\" }, { \"country_code\": \"kp\", \"country_name\": \"Korea, Democratic People's Republic of\" },\n  { \"country_code\": \"kr\", \"country_name\": \"Korea, Republic of\" }, { \"country_code\": \"kw\", \"country_name\": \"Kuwait\" },\n  { \"country_code\": \"kg\", \"country_name\": \"Kyrgyzstan\" }, { \"country_code\": \"la\", \"country_name\": \"Lao People's Democratic Republic\" },\n  { \"country_code\": \"lv\", \"country_name\": \"Latvia\" }, { \"country_code\": \"lb\", \"country_name\": \"Lebanon\" },\n  { \"country_code\": \"ls\", \"country_name\": \"Lesotho\" }, { \"country_code\": \"lr\", \"country_name\": \"Liberia\" },\n  { \"country_code\": \"ly\", \"country_name\": \"Libyan Arab Jamahiriya\" }, { \"country_code\": \"li\", \"country_name\": \"Liechtenstein\" },\n  { \"country_code\": \"lt\", \"country_name\": \"Lithuania\" }, { \"country_code\": \"lu\", \"country_name\": \"Luxembourg\" },\n  { \"country_code\": \"mo\", \"country_name\": \"Macao\" }, { \"country_code\": \"mk\", \"country_name\": \"Macedonia, the Former Yugosalv Republic of\" },\n  { \"country_code\": \"mg\", \"country_name\": \"Madagascar\" }, { \"country_code\": \"mw\", \"country_name\": \"Malawi\" },\n  { \"country_code\": \"my\", \"country_name\": \"Malaysia\" }, { \"country_code\": \"mv\", \"country_name\": \"Maldives\" },\n  { \"country_code\": \"ml\", \"country_name\": \"Mali\" }, { \"country_code\": \"mt\", \"country_name\": \"Malta\" },\n  { \"country_code\": \"mh\", \"country_name\": \"Marshall Islands\" }, { \"country_code\": \"mq\", \"country_name\": \"Martinique\" },\n  { \"country_code\": \"mr\", \"country_name\": \"Mauritania\" }, { \"country_code\": \"mu\", \"country_name\": \"Mauritius\" },\n  { \"country_code\": \"yt\", \"country_name\": \"Mayotte\" }, { \"country_code\": \"mx\", \"country_name\": \"Mexico\" },\n  { \"country_code\": \"fm\", \"country_name\": \"Micronesia, Federated States of\" }, { \"country_code\": \"md\", \"country_name\": \"Moldova, Republic of\" },\n  { \"country_code\": \"mc\", \"country_name\": \"Monaco\" }, { \"country_code\": \"mn\", \"country_name\": \"Mongolia\" },\n  { \"country_code\": \"me\", \"country_name\": \"Montenegro\" }, { \"country_code\": \"ms\", \"country_name\": \"Montserrat\" },\n  { \"country_code\": \"ma\", \"country_name\": \"Morocco\" }, { \"country_code\": \"mz\", \"country_name\": \"Mozambique\" },\n  { \"country_code\": \"mm\", \"country_name\": \"Myanmar\" }, { \"country_code\": \"na\", \"country_name\": \"Namibia\" },\n  { \"country_code\": \"nr\", \"country_name\": \"Nauru\" }, { \"country_code\": \"np\", \"country_name\": \"Nepal\" },\n  { \"country_code\": \"nl\", \"country_name\": \"Netherlands\" }, { \"country_code\": \"an\", \"country_name\": \"Netherlands Antilles\" },\n  { \"country_code\": \"nc\", \"country_name\": \"New Caledonia\" }, { \"country_code\": \"nz\", \"country_name\": \"New Zealand\" },\n  { \"country_code\": \"ni\", \"country_name\": \"Nicaragua\" }, { \"country_code\": \"ne\", \"country_name\": \"Niger\" },\n  { \"country_code\": \"ng\", \"country_name\": \"Nigeria\" }, { \"country_code\": \"nu\", \"country_name\": \"Niue\" },\n  { \"country_code\": \"nf\", \"country_name\": \"Norfolk Island\" }, { \"country_code\": \"mp\", \"country_name\": \"Northern Mariana Islands\" },\n  { \"country_code\": \"no\", \"country_name\": \"Norway\" }, { \"country_code\": \"om\", \"country_name\": \"Oman\" },\n  { \"country_code\": \"pk\", \"country_name\": \"Pakistan\" }, { \"country_code\": \"pw\", \"country_name\": \"Palau\" },\n  { \"country_code\": \"ps\", \"country_name\": \"Palestinian Territory, Occupied\" }, { \"country_code\": \"pa\", \"country_name\": \"Panama\" },\n  { \"country_code\": \"pg\", \"country_name\": \"Papua New Guinea\" }, { \"country_code\": \"py\", \"country_name\": \"Paraguay\" },\n  { \"country_code\": \"pe\", \"country_name\": \"Peru\" }, { \"country_code\": \"ph\", \"country_name\": \"Philippines\" },\n  { \"country_code\": \"pn\", \"country_name\": \"Pitcairn\" }, { \"country_code\": \"pl\", \"country_name\": \"Poland\" },\n  { \"country_code\": \"pt\", \"country_name\": \"Portugal\" }, { \"country_code\": \"pr\", \"country_name\": \"Puerto Rico\" },\n  { \"country_code\": \"qa\", \"country_name\": \"Qatar\" }, { \"country_code\": \"re\", \"country_name\": \"Reunion\" },\n  { \"country_code\": \"ro\", \"country_name\": \"Romania\" }, { \"country_code\": \"ru\", \"country_name\": \"Russian Federation\" },\n  { \"country_code\": \"rw\", \"country_name\": \"Rwanda\" }, { \"country_code\": \"sh\", \"country_name\": \"Saint Helena\" },\n  { \"country_code\": \"kn\", \"country_name\": \"Saint Kitts and Nevis\" }, { \"country_code\": \"lc\", \"country_name\": \"Saint Lucia\" },\n  { \"country_code\": \"pm\", \"country_name\": \"Saint Pierre and Miquelon\" }, { \"country_code\": \"vc\", \"country_name\": \"Saint Vincent and the Grenadines\" },\n  { \"country_code\": \"ws\", \"country_name\": \"Samoa\" }, { \"country_code\": \"sm\", \"country_name\": \"San Marino\" },\n  { \"country_code\": \"st\", \"country_name\": \"Sao Tome and Principe\" }, { \"country_code\": \"sa\", \"country_name\": \"Saudi Arabia\" },\n  { \"country_code\": \"sn\", \"country_name\": \"Senegal\" }, { \"country_code\": \"rs\", \"country_name\": \"Serbia\" },\n  { \"country_code\": \"sc\", \"country_name\": \"Seychelles\" }, { \"country_code\": \"sl\", \"country_name\": \"Sierra Leone\" },\n  { \"country_code\": \"sg\", \"country_name\": \"Singapore\" }, { \"country_code\": \"sk\", \"country_name\": \"Slovakia\" },\n  { \"country_code\": \"si\", \"country_name\": \"Slovenia\" }, { \"country_code\": \"sb\", \"country_name\": \"Solomon Islands\" },\n  { \"country_code\": \"so\", \"country_name\": \"Somalia\" }, { \"country_code\": \"za\", \"country_name\": \"South Africa\" },\n  { \"country_code\": \"gs\", \"country_name\": \"South Georgia and the South Sandwich Islands\" }, { \"country_code\": \"es\", \"country_name\": \"Spain\" },\n  { \"country_code\": \"lk\", \"country_name\": \"Sri Lanka\" }, { \"country_code\": \"sd\", \"country_name\": \"Sudan\" },\n  { \"country_code\": \"sr\", \"country_name\": \"Suriname\" }, { \"country_code\": \"sz\", \"country_name\": \"Swaziland\" },\n  { \"country_code\": \"se\", \"country_name\": \"Sweden\" }, { \"country_code\": \"ch\", \"country_name\": \"Switzerland\" },\n  { \"country_code\": \"sy\", \"country_name\": \"Syrian Arab Republic\" }, { \"country_code\": \"tw\", \"country_name\": \"Taiwan, Province of China\" },\n  { \"country_code\": \"tj\", \"country_name\": \"Tajikistan\" }, { \"country_code\": \"tz\", \"country_name\": \"Tanzania, United Republic of\" },\n  { \"country_code\": \"th\", \"country_name\": \"Thailand\" }, { \"country_code\": \"tl\", \"country_name\": \"Timor-Leste\" },\n  { \"country_code\": \"tg\", \"country_name\": \"Togo\" }, { \"country_code\": \"tk\", \"country_name\": \"Tokelau\" },\n  { \"country_code\": \"to\", \"country_name\": \"Tonga\" }, { \"country_code\": \"tt\", \"country_name\": \"Trinidad and Tobago\" },\n  { \"country_code\": \"tn\", \"country_name\": \"Tunisia\" }, { \"country_code\": \"tr\", \"country_name\": \"Turkiye\" },\n  { \"country_code\": \"tm\", \"country_name\": \"Turkmenistan\" }, { \"country_code\": \"tc\", \"country_name\": \"Turks and Caicos Islands\" },\n  { \"country_code\": \"tv\", \"country_name\": \"Tuvalu\" }, { \"country_code\": \"ug\", \"country_name\": \"Uganda\" },\n  { \"country_code\": \"ua\", \"country_name\": \"Ukraine\" }, { \"country_code\": \"ae\", \"country_name\": \"United Arab Emirates\" },\n  { \"country_code\": \"gb\", \"country_name\": \"United Kingdom\" }, { \"country_code\": \"us\", \"country_name\": \"United States\" },\n  { \"country_code\": \"uy\", \"country_name\": \"Uruguay\" }, { \"country_code\": \"uz\", \"country_name\": \"Uzbekistan\" },\n  { \"country_code\": \"vu\", \"country_name\": \"Vanuatu\" }, { \"country_code\": \"ve\", \"country_name\": \"Venezuela\" },\n  { \"country_code\": \"vn\", \"country_name\": \"Viet Nam\" }, { \"country_code\": \"vg\", \"country_name\": \"Virgin Islands, British\" },\n  { \"country_code\": \"vi\", \"country_name\": \"Virgin Islands, U.S.\" }, { \"country_code\": \"wf\", \"country_name\": \"Wallis and Futuna\" },\n  { \"country_code\": \"eh\", \"country_name\": \"Western Sahara\" }, { \"country_code\": \"ye\", \"country_name\": \"Yemen\" },\n  { \"country_code\": \"zm\", \"country_name\": \"Zambia\" }, { \"country_code\": \"zw\", \"country_name\": \"Zimbabwe\" }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -12120,
        2640
      ],
      "id": "792844fb-488f-4c98-a0f4-cf0791f8544e",
      "name": "Load Country Codes"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://searchconsole.googleapis.com/v1/urlInspection/index:inspect",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleOAuth2Api",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"inspectionUrl\": \"{{ $json.url }}\",\n  \"siteUrl\": \"https://quantalhq.com/\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -10040,
        2220
      ],
      "id": "a40568b5-3777-4265-9383-596355f4fd52",
      "name": "Inspect URL",
      "retryOnFail": true,
      "executeOnce": true,
      "waitBetweenTries": 5000,
      "credentials": {
        "googleOAuth2Api": {
          "id": "W6QUJKWN4W8lz8rr",
          "name": "Google account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Inspect URL & Pagespeed Check\n\n",
        "height": 760,
        "width": 2880,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -10220,
        2060
      ],
      "id": "8156ebed-9343-4a2c-a69b-01d5f1588d87",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "# Performance Analysis\n",
        "height": 1080,
        "width": 2880,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -10180,
        2840
      ],
      "id": "bdcc4e22-0c1e-4963-8e55-f39cd2fba1c5",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "projectId": {
          "__rl": true,
          "value": "johns-n8n-production",
          "mode": "list",
          "cachedResultName": "john's-n8n-production",
          "cachedResultUrl": "https://console.cloud.google.com/bigquery?project=johns-n8n-production"
        },
        "sqlQuery": "WITH \ncurrent_period AS (\n  SELECT \n    '{{ $json.url }}' AS url,\n    SUM(impressions) AS current_impressions,\n    SUM(clicks) AS current_clicks,\n    ROUND(SAFE_DIVIDE(SUM(sum_position), SUM(impressions)), 2) AS current_avg_position,\n    ROUND(SAFE_DIVIDE(SUM(clicks), SUM(impressions)) * 100, 2) AS current_ctr\n  FROM `{{ $json.bigquery_table }}`\n  WHERE data_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL {{ $json.period_length - 1 }} DAY)\n                      AND CURRENT_DATE()\n    AND search_type = 'WEB'\n    AND (\n      REGEXP_CONTAINS(url, CONCAT('^', REGEXP_REPLACE('{{ $json.url }}', r'/$', ''), '/?$'))\n      OR REGEXP_CONTAINS(url, CONCAT('^', REGEXP_REPLACE(REPLACE('{{ $json.url }}', '://', '://www.'), r'/$', ''), '/?$'))\n    )\n)\n\nSELECT \n  url,\n  current_impressions,\n  current_clicks,\n  current_avg_position,\n  current_ctr\nFROM current_period;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.googleBigQuery",
      "typeVersion": 2.1,
      "position": [
        -10000,
        2980
      ],
      "id": "8dfa64fd-8679-4471-9785-f1bf4708aa52",
      "name": "Base Performance",
      "alwaysOutputData": true,
      "executeOnce": true,
      "retryOnFail": true,
      "credentials": {
        "googleBigQueryOAuth2Api": {
          "id": "rp846Hgc73Yjn7mf",
          "name": "Google BigQuery account"
        }
      }
    },
    {
      "parameters": {
        "projectId": {
          "__rl": true,
          "value": "johns-n8n-production",
          "mode": "list",
          "cachedResultName": "john's-n8n-production",
          "cachedResultUrl": "https://console.cloud.google.com/bigquery?project=johns-n8n-production"
        },
        "sqlQuery": "WITH query_metrics AS (\n  SELECT \n    query,\n    SUM(impressions) AS total_impressions,\n    SUM(clicks) AS total_clicks,\n    ROUND(AVG(SAFE_DIVIDE(sum_position, impressions)), 2) AS avg_position,\n    ROUND(SAFE_DIVIDE(SUM(clicks), SUM(impressions)) * 100, 2) AS ctr\n  FROM `{{ $json.bigquery_table }}`\n  WHERE\n    is_anonymized_query = FALSE\n    AND data_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL {{ $json.period_length }} DAY) AND CURRENT_DATE()\n    -- minimal change: robust root-page match (no/with slash, no/with www)\n    AND (\n      REGEXP_CONTAINS(url, CONCAT('^', REGEXP_REPLACE('{{ $json.url }}', r'/$', ''), '/?$'))\n      OR REGEXP_CONTAINS(url, CONCAT('^', REGEXP_REPLACE(REPLACE('{{ $json.url }}', '://', '://www.'), r'/$', ''), '/?$'))\n    )\n  GROUP BY query\n),\n\n-- Calculate position-based metrics\nposition_analysis AS (\n  SELECT\n    query,\n    total_impressions,\n    total_clicks,\n    avg_position,\n    ctr,\n    CASE \n      WHEN avg_position <= 3 THEN 'top_3'\n      WHEN avg_position <= 10 THEN 'pos_4_to_10'\n      WHEN avg_position <= 20 THEN 'pos_11_to_20'\n      ELSE 'pos_20_plus'\n    END AS position_bucket\n  FROM query_metrics\n)\n\nSELECT\n  '{{ $json.url }}' AS url,\n  position_bucket,\n  COUNT(*) AS query_count,\n  STRING_AGG(CONCAT(query, ' (', CAST(avg_position AS STRING), ')') LIMIT 10) AS top_queries,\n  ROUND(AVG(total_impressions), 2) AS avg_impressions,\n  ROUND(AVG(total_clicks), 2) AS avg_clicks,\n  ROUND(AVG(ctr), 2) AS avg_ctr,\n  ROUND(AVG(avg_position), 2) AS avg_position\nFROM position_analysis\nGROUP BY url, position_bucket\nORDER BY \n  CASE position_bucket\n    WHEN 'top_3' THEN 1\n    WHEN 'pos_4_to_10' THEN 2\n    WHEN 'pos_11_to_20' THEN 3\n    WHEN 'pos_20_plus' THEN 4\n  END;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.googleBigQuery",
      "typeVersion": 2.1,
      "position": [
        -10000,
        3200
      ],
      "id": "bfd9400e-fd50-4bfd-89d5-33f81dfa854d",
      "name": "Position Distribution by Keywords",
      "executeOnce": true,
      "alwaysOutputData": true,
      "retryOnFail": true,
      "credentials": {
        "googleBigQueryOAuth2Api": {
          "id": "rp846Hgc73Yjn7mf",
          "name": "Google BigQuery account"
        }
      }
    },
    {
      "parameters": {
        "projectId": {
          "__rl": true,
          "value": "johns-n8n-production",
          "mode": "list",
          "cachedResultName": "john's-n8n-production",
          "cachedResultUrl": "https://console.cloud.google.com/bigquery?project=johns-n8n-production"
        },
        "sqlQuery": "WITH current_period AS (\n  SELECT\n    url,\n    query,\n    ROUND(SAFE_DIVIDE(SUM(sum_position), SUM(impressions)), 2) AS current_position,\n    SUM(impressions) AS current_impressions,\n    ROUND(SAFE_DIVIDE(SUM(clicks), SUM(impressions)) * 100, 2) AS current_ctr,\n    ROUND(SUM(impressions) * (1 - 1 / NULLIF(ROUND(SAFE_DIVIDE(SUM(sum_position), SUM(impressions)), 2), 0)), 2) AS current_potential\n  FROM `{{ $json.bigquery_table }}`\n  WHERE\n    is_anonymized_query = FALSE\n    AND data_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL {{ $json.period_length }} DAY) AND CURRENT_DATE()\n    -- match URL variations (with/without slash, with/without www)\n    AND (\n      REGEXP_CONTAINS(url, CONCAT('^', REGEXP_REPLACE('{{ $json.url }}', r'/$', ''), '/?$'))\n      OR REGEXP_CONTAINS(url, CONCAT('^', REGEXP_REPLACE(REPLACE('{{ $json.url }}', '://', '://www.'), r'/$', ''), '/?$'))\n    )\n  GROUP BY url, query\n),\n\nurl_metrics AS (\n  SELECT\n    COUNT(DISTINCT query) AS total_queries,\n    SUM(current_impressions) AS total_impressions,\n    AVG(current_impressions) AS avg_impressions\n  FROM current_period\n),\n\nranked_queries AS (\n  SELECT\n    c.url,\n    c.query,\n    c.current_position,\n    c.current_impressions,\n    c.current_ctr,\n    c.current_potential,\n    PERCENT_RANK() OVER (ORDER BY c.current_impressions) AS impression_percentile,\n    m.total_queries,\n    m.total_impressions,\n    m.avg_impressions\n  FROM current_period c\n  CROSS JOIN url_metrics m\n)\n\nSELECT \n  url,\n  query,\n  current_position,\n  current_impressions,\n  current_ctr,\n  current_potential\nFROM ranked_queries\nWHERE \n  (\n    CASE \n      WHEN total_queries >= 100 AND total_impressions >= 1000 THEN\n        current_impressions >= 20\n        AND current_position BETWEEN 4 AND 20\n        AND impression_percentile >= 0.2\n      WHEN total_queries >= 50 AND total_impressions >= 500 THEN\n        current_impressions >= 10\n        AND current_position BETWEEN 4 AND 30\n        AND impression_percentile >= 0.1\n      ELSE\n        current_impressions >= 5\n        AND current_position <= 50\n    END\n  )\n  AND current_potential > 0\nORDER BY \n  current_potential DESC,\n  current_impressions DESC\nLIMIT 30;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.googleBigQuery",
      "typeVersion": 2.1,
      "position": [
        -10000,
        3400
      ],
      "id": "7f955dfc-ec74-43dc-8b12-0587ec41408b",
      "name": "Analyze Query Opportunities",
      "alwaysOutputData": true,
      "executeOnce": true,
      "retryOnFail": true,
      "credentials": {
        "googleBigQueryOAuth2Api": {
          "id": "rp846Hgc73Yjn7mf",
          "name": "Google BigQuery account"
        }
      }
    },
    {
      "parameters": {
        "projectId": {
          "__rl": true,
          "value": "johns-n8n-production",
          "mode": "list",
          "cachedResultName": "john's-n8n-production",
          "cachedResultUrl": "https://console.cloud.google.com/bigquery?project=johns-n8n-production"
        },
        "sqlQuery": "WITH daily_metrics AS (\n  SELECT \n    data_date AS date,\n    LOWER(query) AS keyword,\n    url,\n    device,\n    SUM(clicks) AS clicks,\n    SUM(impressions) AS impressions,\n    ROUND(AVG(SAFE_DIVIDE(sum_position, impressions)), 1) AS position,\n    ROUND(SAFE_DIVIDE(SUM(clicks), SUM(impressions)) * 100, 2) AS ctr\n  FROM\n    -- Gets the correct, full table name from our configuration sheet\n    `{{ $('Get BigQuery Table Names1').first().json.search_data_url_impression }}`\n  WHERE \n    -- Gets the correct period length from our validated user input\n    data_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL {{ $('Parse Data').first().json.article_data.period_length }} DAY) AND CURRENT_DATE()\n    AND is_anonymized_query = FALSE\n    -- Gets the correctly formatted list of keywords to track\n    AND LOWER(query) IN ( {{ $('Generate Keyword List as a String').first().json.keywords }} )\n    AND url NOT LIKE '%#%'\n  GROUP BY\n    date, keyword, url, device\n)\n\nSELECT \n  date,\n  keyword,\n  device,\n  url,\n  clicks,\n  impressions,\n  position,\n  ctr\nFROM daily_metrics\nORDER BY\n  date ASC, keyword, position ASC",
        "options": {}
      },
      "type": "n8n-nodes-base.googleBigQuery",
      "typeVersion": 2.1,
      "position": [
        -9860,
        3600
      ],
      "id": "eb3b791d-ecef-4039-8cfe-557403a4e814",
      "name": "Target Keyword Performance",
      "alwaysOutputData": true,
      "retryOnFail": true,
      "credentials": {
        "googleBigQueryOAuth2Api": {
          "id": "rp846Hgc73Yjn7mf",
          "name": "Google BigQuery account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $items('Set Workflow Data1(Originall)')[0].json.spreedsheet_id }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $items('Set Workflow Data1(Originall)')[0].json.index_status_and_pagespeed || \"Index Status & Pagespeed\"}}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "Indexed",
              "displayName": "Indexed",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Last Time Crawled",
              "displayName": "Last Time Crawled",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Fetch State",
              "displayName": "Fetch State",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Performance Score (Mobile)",
              "displayName": "Performance Score (Mobile)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Largest Contentful Paint (Mobile)",
              "displayName": "Largest Contentful Paint (Mobile)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Cumulative Layout Shift (Mobile)",
              "displayName": "Cumulative Layout Shift (Mobile)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "First Contentful Paint (Mobile)",
              "displayName": "First Contentful Paint (Mobile)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Total Blocking Time (Mobile)",
              "displayName": "Total Blocking Time (Mobile)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Performance Score (Desktop)",
              "displayName": "Performance Score (Desktop)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Largest Contentful Paint (Desktop)",
              "displayName": "Largest Contentful Paint (Desktop)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Cumulative Layout Shift (Desktop)",
              "displayName": "Cumulative Layout Shift (Desktop)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "First Contentful Paint (Desktop)",
              "displayName": "First Contentful Paint (Desktop)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Total Blocking Time (Desktop)",
              "displayName": "Total Blocking Time (Desktop)",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -8960,
        2400
      ],
      "id": "8529b7da-9abc-4f8c-b4c1-438bf98d2894",
      "name": "Insert Pagespeed & Index Data",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fK8lELKZIRzBTDHa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $items('Set Workflow Data1(Originall)')[0].json.spreedsheet_id.trim()}}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{$items('Set Workflow Data1(Originall)')[0].json.sheets_base_performance.trim() || 'Base Performance'}}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_impressions",
              "displayName": "current_impressions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_clicks",
              "displayName": "current_clicks",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_avg_position",
              "displayName": "current_avg_position",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_ctr",
              "displayName": "current_ctr",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -9520,
        3000
      ],
      "id": "90326b54-9256-4f9c-8976-63a28e0b1692",
      "name": "Insert Base Performance",
      "executeOnce": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fK8lELKZIRzBTDHa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $items('Set Workflow Data1(Originall)')[0].json.spreedsheet_id }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $items('Set Workflow Data1(Originall)')[0].json.keyword_tracking || \"Keyword Tracking\" }}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "date",
              "displayName": "date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "keyword",
              "displayName": "keyword",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "device",
              "displayName": "device",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "clicks",
              "displayName": "clicks",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "impressions",
              "displayName": "impressions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "position",
              "displayName": "position",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ctr",
              "displayName": "ctr",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -9500,
        3600
      ],
      "id": "4e4782f4-314f-48e4-b53a-618323e66089",
      "name": "Insert Keyword Ranking",
      "executeOnce": false,
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fK8lELKZIRzBTDHa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $items('Set Workflow Data1(Originall)')[0].json.spreedsheet_id }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $items('Set Workflow Data1(Originall)')[0].json.query_opportunities || \"Query Opportunities\"}}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "query",
              "displayName": "query",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_position",
              "displayName": "current_position",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_impressions",
              "displayName": "current_impressions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_ctr",
              "displayName": "current_ctr",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_potential",
              "displayName": "current_potential",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "useAppend": true
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -9520,
        3400
      ],
      "id": "6993b7db-8e56-477e-8a80-06050d9f4fe5",
      "name": "Insert Query Performance",
      "executeOnce": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fK8lELKZIRzBTDHa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "={{ $items('Set Workflow Data1(Originall)')[0].json.spreedsheet_id }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $items('Set Workflow Data1(Originall)')[0].json.sheets_position_distriibution || \"Position Distriibution\" }}",
          "mode": "name"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "position_bucket",
              "displayName": "position_bucket",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "query_count",
              "displayName": "query_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "top_queries",
              "displayName": "top_queries",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "avg_impressions",
              "displayName": "avg_impressions",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "avg_clicks",
              "displayName": "avg_clicks",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "avg_ctr",
              "displayName": "avg_ctr",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "avg_position",
              "displayName": "avg_position",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -9520,
        3180
      ],
      "id": "a0e39a5a-995b-4982-b3c6-f5b50a2339a6",
      "name": "Insert Position Distribution",
      "executeOnce": false,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fK8lELKZIRzBTDHa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7578a446-0b15-4735-bc81-0554a3f9ae66",
              "name": "Indexed",
              "value": "={{ $json.inspectionResult.indexStatusResult.verdict }}",
              "type": "string"
            },
            {
              "id": "9455c844-79c7-4045-831d-5ff94f697a03",
              "name": "Last Time Crawled",
              "value": "={{ $json.inspectionResult.indexStatusResult.lastCrawlTime }}",
              "type": "string"
            },
            {
              "id": "3caea68e-a4c2-4c20-8bcb-2cc460cea0de",
              "name": "Fetch State",
              "value": "={{ $json.inspectionResult.indexStatusResult.pageFetchState }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -9460,
        2220
      ],
      "id": "69c6b9be-01b2-4698-8533-90a91b67e406",
      "name": "Get Inspect URL Keys"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6f026620-6c68-49ed-bf47-bce67ea55900",
              "name": "Performance Score (Mobile)",
              "value": "={{ $json.lighthouseResult.categories.performance.score }}",
              "type": "string"
            },
            {
              "id": "7dd9db4e-3588-44ad-a4fb-40541ffe2a53",
              "name": "Largest Contentful Paint (Mobile)",
              "value": "={{ $json.lighthouseResult.audits['largest-contentful-paint'].displayValue }}",
              "type": "string"
            },
            {
              "id": "c33fef36-b6f0-442e-9f7b-eadd19cf6b88",
              "name": "Cumulative Layout Shift (Mobile)",
              "value": "={{ $json.lighthouseResult.audits['cumulative-layout-shift'].displayValue }}",
              "type": "string"
            },
            {
              "id": "912f1dcb-5743-484e-9cf2-84b8d0050018",
              "name": "First Contentful Paint (Mobile)",
              "value": "={{ $json.lighthouseResult.audits['first-contentful-paint'].displayValue }}",
              "type": "string"
            },
            {
              "id": "81fb538b-6136-4d32-9b73-e50a7e87f947",
              "name": "Total Blocking Time (Mobile)",
              "value": "={{ $json.lighthouseResult.audits['total-blocking-time'].displayValue }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -9460,
        2400
      ],
      "id": "c10204d3-41d5-4379-8106-d3801c0aa746",
      "name": "Get Pagespeed Moible Keys"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6f026620-6c68-49ed-bf47-bce67ea55900",
              "name": "Performance Score (Desktop)",
              "value": "={{ $json.lighthouseResult.categories.performance.score }}",
              "type": "string"
            },
            {
              "id": "7dd9db4e-3588-44ad-a4fb-40541ffe2a53",
              "name": "Largest Contentful Paint (Desktop)",
              "value": "={{ $json.lighthouseResult.audits['largest-contentful-paint'].displayValue }}",
              "type": "string"
            },
            {
              "id": "c33fef36-b6f0-442e-9f7b-eadd19cf6b88",
              "name": "Cumulative Layout Shift (Desktop)",
              "value": "={{ $json.lighthouseResult.audits['cumulative-layout-shift'].displayValue }}",
              "type": "string"
            },
            {
              "id": "912f1dcb-5743-484e-9cf2-84b8d0050018",
              "name": "First Contentful Paint (Desktop)",
              "value": "={{ $json.lighthouseResult.audits['first-contentful-paint'].displayValue }}",
              "type": "string"
            },
            {
              "id": "6c2c564d-b587-4a8f-9b5e-4585d327b802",
              "name": "Total Blocking Time (Desktop)",
              "value": "={{ $json.lighthouseResult.audits['total-blocking-time'].displayValue }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -9460,
        2580
      ],
      "id": "55be2de7-da18-4f8b-be26-025cea085b92",
      "name": "Get Pagespeed Desktop Keys"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 3,
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -9180,
        2400
      ],
      "id": "24e9f4d8-e6ae-4cae-8717-ec813b7d1481",
      "name": "Merge Index & Pagespeed Data",
      "executeOnce": true
    },
    {
      "parameters": {
        "jsCode": "// Get the input array of target keywords\nconst keywordsArray = $('Parse Data').first().json.article_data.target_keywords;\n\n// Ensure we have an array to work with\nif (!Array.isArray(keywordsArray)) {\n  return [{ json: { keywords: '' } }];\n}\n\n// Format the array into the correct SQL string: 'keyword1', 'keyword2', 'keyword3'\nconst formattedKeywords = keywordsArray\n  .map(keyword => `'${String(keyword).trim()}'`) // Add single quotes around each keyword\n  .join(', '); // Join them with a comma and a space\n\n// Return the final, correctly formatted string\nreturn [{ json: { keywords: formattedKeywords } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -10040,
        3600
      ],
      "id": "c10821b2-0c5c-4242-a726-49286a50f2ea",
      "name": "Generate Keyword List as a String",
      "executeOnce": true
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "workflow_input_data",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -8980,
        2240
      ],
      "id": "9b5b43b6-e111-46b9-9b66-1165b670066a",
      "name": "Aggregate6"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "index_and_pagespeed_data",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -8740,
        2400
      ],
      "id": "b1d4a48f-5b88-4cfe-ac93-a77e80403062",
      "name": "Aggregate7"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/pagespeedonline/v5/runPagespeed",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "=url",
              "value": "={{ $json.url }}"
            },
            {
              "name": "strategy",
              "value": "mobile"
            },
            {
              "name": "key",
              "value": "AIzaSyAwlc4vwz3r_Ji97DUL443x4iCWGcVP_pY"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -10040,
        2400
      ],
      "id": "29f282f6-f2b9-4e10-bc81-c33e981acb1f",
      "name": "Get Pagespeed Check Mobile",
      "executeOnce": true,
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/pagespeedonline/v5/runPagespeed",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "={{ $json.url }}"
            },
            {
              "name": "strategy",
              "value": "desktop"
            },
            {
              "name": "key",
              "value": "AIzaSyAwlc4vwz3r_Ji97DUL443x4iCWGcVP_pY"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -10040,
        2580
      ],
      "id": "a04abefb-333c-48b5-a5b0-ed947335de40",
      "name": "Get Pagespeed Check Desktop",
      "executeOnce": true,
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "jsCode": "// Parse \"term (pos), term2 (pos2) ...\" into [{term, position}]\nfunction extractTopQueries(queryString) {\n  // Handle missing/empty/non-string inputs\n  if (queryString == null) return [];\n  if (Array.isArray(queryString)) {\n    // If it's already an array of strings or objects, normalize\n    return queryString\n      .map(x => {\n        if (typeof x === 'string') return x.trim();\n        if (x && typeof x === 'object' && x.term != null) {\n          return `${x.term} (${x.position ?? ''})`;\n        }\n        return '';\n      })\n      .filter(Boolean)\n      .map(parseChunk)\n      .slice(0, 5);\n  }\n  if (typeof queryString !== 'string') {\n    // Last-resort: stringify unknown types\n    queryString = String(queryString);\n  }\n\n  return queryString\n    .split(',')                 // split chunks by comma\n    .map(s => s.trim())\n    .filter(Boolean)\n    .map(parseChunk)\n    .slice(0, 5);\n}\n\n// Parse one chunk like \"keyword (4.2)\"\nfunction parseChunk(chunk) {\n  const m = chunk.match(/^(.+?)\\s*\\(([-+]?\\d*\\.?\\d+)\\)\\s*$/);\n  if (m) {\n    return { term: m[1], position: Number(m[2]) };\n  }\n  // Fallback: no position present\n  return { term: chunk, position: NaN };\n}\n\nfunction getBucketPriority(bucket) {\n  switch (bucket) {\n    case 'top_3': return 3;\n    case 'pos_4_to_10': return 2;\n    case 'pos_11_plus': return 1;\n    default: return 0;\n  }\n}\n\n// Process all incoming items safely\nconst processedData = $input.all().map((item) => {\n  const data = item.json || {};\n  const topQueries = extractTopQueries(data.top_queries);\n\n  return {\n    json: {\n      bucket: data.position_bucket ?? null,\n      top_queries: topQueries.map(q => ({\n        term: q.term,\n        // keep as number; format later if needed\n        position: isNaN(q.position) ? null : q.position\n      }))\n    }\n  };\n})\n// Sort buckets by our priority (handles nulls safely)\n.sort((a, b) => getBucketPriority(b.json.bucket) - getBucketPriority(a.json.bucket));\n\nreturn processedData;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -9060,
        3180
      ],
      "id": "9266efca-765c-4f19-8437-e9b2592bdf12",
      "name": "Parse Data #5"
    },
    {
      "parameters": {
        "jsCode": "// Create a scoring and categorization system\nfunction calculateImportanceScore(data) {\n  const position = Number(data.current_position);\n  const impressions = Number(data.current_impressions);\n  const positionChange = Number(data.position_change);\n  \n  // Higher score = more important\n  let score = 0;\n  \n  // Position scoring (higher positions get higher scores)\n  score += (10 - Math.min(position, 10)) * 10;\n  \n  // Impression volume scoring\n  score += Math.min(impressions / 100, 20);\n  \n  // Trend scoring (improving positions get bonus)\n  score += (positionChange < 0) ? 10 : 0;\n  \n  return score;\n}\n\nfunction getPerformanceStatus(data) {\n  const positionChange = Number(data.position_change);\n  const impressionsChange = Number(data.impressions_change);\n  const ctrChange = Number(data.ctr_change);\n  \n  if (positionChange < -0.5 && ctrChange > 0) return \"improving\";\n  if (positionChange > 0.5 || (impressionsChange < 0 && ctrChange < 0)) return \"declining\";\n  return \"stable\";\n}\n\n// Process the input data\nconst processedQueries = $input.all().map(item => {\n  const data = item.json;\n  const score = calculateImportanceScore(data);\n  const status = getPerformanceStatus(data);\n  \n  return {\n    json: {\n      query: data.query,\n      metrics: {\n        position: Number(data.current_position).toFixed(1),\n        impressions: Number(data.current_impressions),\n        changes: {\n          position: Number(data.position_change).toFixed(1),\n          ctr: Number(data.ctr_change).toFixed(1)\n        }\n      },\n      status,\n      importance_score: Math.round(score)\n    }\n  };\n});\n\n// Sort by importance score\nconst sortedQueries = processedQueries.sort((a, b) => \n  b.json.importance_score - a.json.importance_score\n);\n\nreturn sortedQueries;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -9040,
        3400
      ],
      "id": "1ae4a8ca-8e73-4819-83e0-9d43fe687731",
      "name": "Parse Data #6"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "base_performance",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -8880,
        3000
      ],
      "id": "a1cad0c1-a8b7-4b02-be0c-196c32aea5ef",
      "name": "Set Key #5"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "query_performance",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -8840,
        3400
      ],
      "id": "6a3a1566-5e88-4ca4-b4f7-9c47856fb7ee",
      "name": "Set Key #7"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "keyword_ranking",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -8860,
        3600
      ],
      "id": "dd59f2e4-ab61-49d4-b8dd-0380935aed81",
      "name": "Set Key #8"
    },
    {
      "parameters": {
        "content": "# Fetch Performance Data",
        "height": 980,
        "width": 500,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -10100,
        2920
      ],
      "id": "02c47b78-273c-4a3b-9182-3ad3cdb44e6d",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "content": "# Save Performance Data",
        "height": 980,
        "width": 420,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -9580,
        2920
      ],
      "id": "2bfbb0b3-85c4-4df2-8b11-9db444e4b06c",
      "name": "Sticky Note15"
    },
    {
      "parameters": {
        "content": "# Parse Data For Analysis",
        "height": 980,
        "width": 460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -9060,
        2900
      ],
      "id": "5de03a64-15b8-47fa-8bcc-95191ccbece4",
      "name": "Sticky Note16"
    },
    {
      "parameters": {
        "content": "# Fetch Pagespeed & Inspect URL",
        "height": 640,
        "width": 560,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -10100,
        2120
      ],
      "id": "0d46f948-9e69-49e8-b460-c9517b6542cb",
      "name": "Sticky Note19",
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Parse Data For Analysis & Save Pagespeed & Index Results",
        "height": 540,
        "width": 1040,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -9520,
        2160
      ],
      "id": "f8876b46-932c-4f1b-a2a3-80e10a7963eb",
      "name": "Sticky Note20",
      "disabled": true
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "position_distribution",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -8860,
        3180
      ],
      "id": "85ddb155-5601-49e8-afe8-4da99a1256d2",
      "name": "Set Key #"
    },
    {
      "parameters": {
        "jsCode": "// First group by keyword and collect daily stats\nconst groupedByKeyword = {};\n\nfor (const item of $input.all()) {\n  const { date, keyword, clicks, impressions, position } = item.json;\n  \n  if (!groupedByKeyword[keyword]) {\n    groupedByKeyword[keyword] = {\n      keyword,\n      daily_stats: {}\n    };\n  }\n  \n  if (!groupedByKeyword[keyword].daily_stats[date]) {\n    groupedByKeyword[keyword].daily_stats[date] = {\n      clicks: 0,\n      impressions: 0,\n      weightedPositionSum: 0,\n      positionImpressions: 0\n    };\n  }\n\n  // Aggregate daily stats\n  groupedByKeyword[keyword].daily_stats[date].clicks += Number(clicks);\n  groupedByKeyword[keyword].daily_stats[date].impressions += Number(impressions);\n  groupedByKeyword[keyword].daily_stats[date].weightedPositionSum += Number(position) * Number(impressions);\n  groupedByKeyword[keyword].daily_stats[date].positionImpressions += Number(impressions);\n}\n\n// Convert to final format with sorted daily arrays\nconst output = Object.values(groupedByKeyword).map(keywordData => {\n  // Convert daily_stats object to sorted array\n  const dailyStats = Object.entries(keywordData.daily_stats)\n    .map(([date, stats]) => {\n      const ctr = stats.impressions > 0 ? (stats.clicks / stats.impressions) * 100 : 0;\n      const avgPosition = stats.positionImpressions > 0\n        ? stats.weightedPositionSum / stats.positionImpressions\n        : 0;\n\n      return {\n        date,\n        clicks: stats.clicks,\n        impressions: stats.impressions,\n        ctr: Number(ctr.toFixed(2)),\n        position: Number(avgPosition.toFixed(2))\n      };\n    })\n    .sort((a, b) => a.date.localeCompare(b.date)); // Sort by date\n\n  return {\n    json: {\n      keyword: keywordData.keyword,\n      performance: dailyStats\n    }\n  };\n});\n\nreturn output;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -9040,
        3600
      ],
      "id": "784346d7-9d70-4116-8e7d-d249897e0538",
      "name": "Parse Data #"
    },
    {
      "parameters": {
        "jsCode": "const allQueries = [];\n\n// Loop through the merged mobile and desktop results\nfor (const item of $input.all()) {\n  const relatedSearches = item.json.related_searches || [];\n\n  // Loop through each block in the related_searches array\n  for (const searchBlock of relatedSearches) {\n    // Case 1: It's a simple text-based search with a 'query' field\n    if (searchBlock.query) {\n      allQueries.push({ json: { query: searchBlock.query } });\n    }\n    // Case 2: It's a complex visual block with a nested 'items' array\n    else if (searchBlock.items && Array.isArray(searchBlock.items)) {\n      for (const subItem of searchBlock.items) {\n        if (subItem.name) {\n          allQueries.push({ json: { query: subItem.name } });\n        }\n      }\n    }\n  }\n}\n\n// Return a flat list of items, each with a single 'query' field\nreturn allQueries;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -8620,
        580
      ],
      "id": "acc6e25f-06fe-4e9b-8587-bfa0aa60ab9a",
      "name": "Extract All Search Queries",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "078bdeca-26a3-4fe3-834f-ad189e3de85a",
              "leftValue": "={{ $json.success }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "8de3c768-4cac-4dcf-af46-dc2637cdf183",
              "leftValue": "=\"{{ $json.results[0].status_code }}\"",
              "rightValue": "\"200\"",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -8380,
        1540
      ],
      "id": "bdcf8285-8475-47c9-8905-4cdd5d5e2a59",
      "name": "Was Crawl Successful?"
    },
    {
      "parameters": {
        "content": "# Crawl Article to Be Optimized",
        "height": 320,
        "width": 820,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -10160,
        4020
      ],
      "id": "3d3dc503-0080-4b2e-8d22-3e34555b9160",
      "name": "Sticky Note17",
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Parse Data For Analysis",
        "height": 320,
        "width": 460,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -9320,
        4020
      ],
      "id": "fae2b1b9-1f90-468c-9334-922f0b4a6860",
      "name": "Sticky Note18",
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Crawl Article to be optimized",
        "height": 420,
        "width": 2880,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -10200,
        3940
      ],
      "id": "ffe47912-dd3d-4e67-9a5c-ba65a313406d",
      "name": "Sticky Note12"
    },
    {
      "parameters": {
        "method": "POST",
        "url": " https://crawl4ai-pq7zubgvra-el.a.run.app/crawl",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n\t\"urls\": [\n\"{{ $json.url }}\"\n\t]\n}",
        "options": {
          "timeout": 3600000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -10020,
        4120
      ],
      "id": "75324963-a766-4456-860a-17051d64131f",
      "name": "Get Article Content1",
      "executeOnce": true,
      "retryOnFail": true,
      "waitBetweenTries": 5000
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9177b0ac-024c-4088-a1b4-9254a53244e0",
              "name": "article.url",
              "value": "={{ $json.results[0].url }}",
              "type": "string"
            },
            {
              "id": "bb4b7ad9-dc32-40d5-93d7-51582c64d99f",
              "name": "article.title",
              "value": "={{ $json.results[0].metadata.title }}",
              "type": "string"
            },
            {
              "id": "64dfd766-9b2e-4349-8f4f-8771202cb0d4",
              "name": "article.content",
              "value": "={{ $json.results[0].cleaned_html }}",
              "type": "string"
            },
            {
              "id": "a74a89ab-aa6e-4ff5-934a-c6176702c127",
              "name": "article.description",
              "value": "={{ $json.results[0].metadata.description }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -9220,
        4140
      ],
      "id": "26f5cabb-cc3f-4493-b533-94fde5d7c546",
      "name": "Get Metadata From Article1"
    },
    {
      "parameters": {
        "jsCode": "function extractContent(html) {\n    // Remove all script and style elements\n    html = html.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '')\n               .replace(/<style\\b[^<]*(?:(?!<\\/style>)<[^<]*)*<\\/style>/gi, '')\n               .replace(/<dialog\\b[^<]*(?:(?!<\\/dialog>)<[^<]*)*<\\/dialog>/gi, '');\n    \n    // Extract only paragraphs and headings with their content\n    const contentRegex = /<(p|h[1-6]).*?>(.*?)<\\/\\1>/gi;\n    const matches = [...html.matchAll(contentRegex)];\n    \n    // Clean up the extracted content\n    return matches.map(match => {\n        let content = match[2]\n            .replace(/<[^>]+>/g, '')\n            .replace(/&nbsp;/g, ' ')\n            .replace(/&amp;/g, '&')\n            .replace(/&lt;/g, '<')\n            .replace(/&gt;/g, '>')\n            .replace(/&quot;/g, '\"')\n            .replace(/\\s+/g, ' ')\n            .trim();\n            \n        return content;\n    }).filter(content => content.length > 0).join('\\n\\n');\n}\n\n// Create new array with formatted content\nconst newItems = $input.all().map(item => {\n    return {\n        article: {\n            url: item.json.article.url,\n            title: item.json.article.title,\n            content: extractContent(item.json.article.content)\n        }\n    };\n});\n\nreturn newItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -9000,
        4120
      ],
      "id": "f2130ffd-4482-49cb-8b23-dad187679ec1",
      "name": "Parse Data #10",
      "executeOnce": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "078bdeca-26a3-4fe3-834f-ad189e3de85a",
              "leftValue": "={{ $json.success }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "8de3c768-4cac-4dcf-af46-dc2637cdf183",
              "leftValue": "=\"{{ $json.results[0].status_code }}\"",
              "rightValue": "\"200\"",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -9740,
        4120
      ],
      "id": "0aa35646-3727-4abe-9aac-24f065d6c4d3",
      "name": "Was Crawl Successful?1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=\n{{ $('Interpreter').item.json.output.content_optimization.instructions }}\n\n{{ $('Interpreter').item.json.output.content_optimization.article_analysis }}\n{{ JSON.stringify(($items(\"Set Key #13\")[0]?.json?.article_analysis) ?? \"No pre-analyzed article available.\", null, 2) }}\n\n\n{{ $('Interpreter').item.json.output.content_optimization.keyword_data }}\n{{ JSON.stringify(($items(\"Set Key #11\")[0]?.json?.keyword_analysis) ?? \"No keyword analysis available.\", null, 2) }}\n\n\n{{ $('Interpreter').item.json.output.content_optimization.seo_paragraphs }}\n\n{{ JSON.stringify(($items(\"Set Key #10\")[0]?.json?.faq_and_related_searches_analysis) ?? \"No SEO paragraphs were generated\", null, 2) }}\n\n{{ $('Interpreter').item.json.output.content_optimization.article_text }}\n{{ JSON.stringify($('Parse Data #10').item?.json || \"Article content could not be crawled.\", null, 2) }}\n\n{{ $('Interpreter').item.json.output.content_optimization.final_instruction }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "={{ $('Interpreter').item.json.output.content_optimization.system }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -5020,
        3240
      ],
      "id": "3934f1f2-c547-4059-b8ca-c5a5ddfc1d4c",
      "name": "Content Optimization",
      "executeOnce": true,
      "retryOnFail": true
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "read data here in the Google Sheets",
        "documentId": {
          "__rl": true,
          "value": "={{  $items(\"Create Report Sheet1\")[0].json.spreadsheetId}}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $('Create Report Sheet1').item.json.sheets[0].properties.title }}",
          "mode": "name"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        -6280,
        2480
      ],
      "id": "4038cd64-dd78-4ce8-8eed-8e8dfa9af406",
      "name": "Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fK8lELKZIRzBTDHa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Instruction:\nTranslate the following prompts into the language:{{ $('Aggregate6').item.json.workflow_input_data[0].language }}\nRules:\n\nDo not translate anything inside \"|  |\" or code blocks.\nPreserve formatting, lists, and technical terms.\nPrompt to Translate:\n\"\"\"\n{\n  \"ai_agents\": {\n    \"index_and_pagespeed_analyzer\": {\n      \"system\": \"You are an AI agent that analyzes web performance and indexing data. For each URL, extract and report the following:\\n- Core Web Vitals: LCP, CLS, FID (or INP), FCP\\n- Index status: whether the page is indexed\\n- Last crawl date by Google\\nPresent the results clearly, highlight any issues, and suggest brief, actionable improvements.If reference information is empty then provided best possible answer instead of not outputing the key values defined in output parser.\",\n      \"instructions\": \"Analyze this data using the provided PageSpeed and URL Inspection data. Report:\\n- Core Web Vitals (LCP, CLS, FID/INP, FCP)\\n- Index status\\n- Last crawl date by Google and create a brief summary about the health of the site.\"\n    },\n    \"serp_analyzer\": {\n      \"system\": \"You are an AI agent and an expert in SEO analysis. You receive a Google Sheet with a detailed SERP analysis for a specific keyword. The sheet contains for each competitor: ranking position, page title, meta description, content summary, N-gram analysis, focus keywords, long-tail keywords.\\n\\nYour goals are:\\n\\nAnalyze top competitors to understand their content strategies.\\nIdentify recurring patterns in titles, meta descriptions and content structure.\\nList the competitors' most frequently used N-grams, focus keywords and long-tail keywords.\\nIdentify gaps, weaknesses or untapped opportunities in competitors' content.\\nCreate a concise report with actionable recommendations to improve our article, focusing on how we can differentiate ourselves and outperform the competition.\\nAlways base your analysis solely on the data provided in the sheet:(If reference information is empty then provided best possible answer instead of not outputing the key values defined in output parser)\",\n      \"instructions\": \"You are an expert SEO Strategist. Your first task is to use the provided Google Sheets tool to read and analyze the SERP Analysis of each competitor which is present in the sheet.This sheet contains a detailed breakdown of the top-ranking competitor pages.If any or all fields are empty that simply means data scraping for that competitor  is unavailable.\n**Your Analysis Must Achieve Three Goals:**\n1.  **Understand the Competitive Landscape:** Summarize the overall strategy, user intent, and content quality of the top competitors.\n2.  **Identify Top Content Patterns:** Detail the recurring patterns you find in the competitors' page titles, meta descriptions, content structure, and their most frequently used keywords and phrases (N-grams).\n3.  **Score Gaps in SERP Alignment:** Based on your analysis, identify the most significant content gaps, weaknesses, or untapped opportunities in the competitors' content.\n\n\nProvide a concise, actionable list of recommendations on how our article can fill these gaps to outperform them.\n\nYour final output must be a structured report for \ntitle analysis,snippet analysis,focus keyword analysis,long tail keyword analysis and n gram analysis in keys title_analysis,snippet_analysis,focus_keyword_analysis,long_tail_keyword_analysis & n_gram_analysis respectively addressesing above three points.please make sure your output is in format defined in your output parser.\"\n    },\n  \"keyword_performance_analyzer\": {\n  \"system\": \"You are an expert SEO Keyword Strategist. Your job is to analyze all provided performance and competitive data to find the best keyword opportunities. If any data sections are unavailable, proceed with your analysis using only the data that is available.(If reference information is empty then provided best possible answer instead of not outputing the key values defined in output parser)\",\n  \"instructions\": \"Your Task:\\n\\n1. **Detect Underutilized Keyword Opportunities:** Analyze all the performance data below to identify the keywords with the highest potential for growth (e.g., high impressions but low rankings).\\n\\n2. **Recommend New Content Targets & Suggest Optimization Strategies:** Based on your analysis, determine the best keywords for the article and briefly suggest an optimization strategy. For example, if you find a keyword with high impressions but low CTR, you might suggest improving the page title.\\n\\n**Data for Analysis:**\",\n  \"general_performance\": \"General Performance:\",\n  \"position_distribution\": \"Position Distribution:\",\n  \"query_performance\": \"Query Opportunities:\",\n  \"final_instruction\": \"Based on all this data, determine the best keywords for the article that are both relevant and realistically achievable for ranking. We need keywords for: Primary keywords, Secondary keywords, Title keywords, FAQ keywords.\"\n},\n\"keyword_rank_tracking_analyzer\": {\n  \"system\": \"You are a data-driven SEO Analyst. Your main task is to analyze the daily performance of a specific list of target keywords. Your primary goals are to analyze rank trends, suggest improvement strategies for declining keywords, and identify technical risks like keyword cannibalization.(If reference information is empty then provided best possible answer instead of not outputing the key values defined in output parser)\",\n  \"instructions\": \"Your Task:\\n\\nAnalyze the performance data for the target keywords for last {{$('Set Workflow Data1(Originall)').all()[0].json.period_length}} days which is  provided below. Your analysis must achieve three goals:\\n\\n1. **Analyze Rank Trends:** For each keyword, determine if its ranking position is improving, declining, or stable over the period.\\n\\n2. **Suggest Improvement Strategies:** If a keyword's rank is declining, suggest a specific, actionable improvement strategy (e.g., 'Improve title/meta description,' 'Add more internal links,' 'Refresh content').\\n\\n3. **Identify Risks:** Look for potential issues like keyword cannibalization or missed coverage (high impressions but zero clicks).\\n\\n**Data for Analysis:**\",\n  \"keyword_data\": \"Here is the keyword rank tracking data as an array:\",\n  \"final_instruction\": \"Your final output should be a concise executive summary that highlights the key findings and recommendations from your analysis.\"\n} ,\n    \"article_analyzer\": {\n  \"system\": \"You are an expert SEO Content Auditor. Your main task is to perform a deep analysis of a crawled webpage's content and metadata. Your primary goals are to identify missing structural elements, evaluate readability, flag content issues like thin content or keyword stuffing, and suggest specific improvements for the title, description, and copy tone.please read **Google Sheet**  from **\"Read competitor's  analysis\" tool ** this contains competitor's insight to figure out gaps in our content  for SERP alignment(If reference information is empty then provided best possible answer instead of not outputing the key values defined in output parser)\",\n  \"instructions\": \"Your Task:\\n\\nAnalyze the provided article content and metadata from reference of \"Read competitor's  analysis\" tool which has google sheet containing competitor's content analysis. Your analysis must achieve the following strategic goals:\\n\\n1. **Identify Missing Structural Elements:** Analyze the heading structure (H1s, H2s, H3s). Is it logical? Are there enough subheadings to break up the text? Are any key sections missing?\\n\\n2. **Evaluate Readability and Flag Content Issues:** Read through the content. Is it easy to understand? Flag any potential issues like 'thin content' (sections with little substance), keyword stuffing, or an inconsistent copy tone.\\n\\n3. **Suggest Improvements:** Based on your full analysis, provide specific, actionable suggestions for improving the page's title, meta description, and overall copy to better align with the provided keyword strategy.\\n\\n**Data for Analysis:**\",\n  \"focus_keyword\": \"This is the focus keyword that we want to rank for:\",\n  \"secondary_keywords\": \"Here are the secondary keywords:\",\n  \"article\": \"Here is the content of the article:\",\n  \"final_instruction\": \"Your final output must be a structured report that can be parsed into the required JSON format with the following keys: title_analysis, meta_description_analysis, headings_analysis, content_summary, first_100_words_analysis, last_100_words_analysis.\"\n},\n    \"faqs_and_related_searches_analyzer\": {\n  \"system\": \"You are an expert SEO Content Strategist. Your job is to analyze user questions and transform them into a structured, SEO-optimized FAQ section. Your primary goal is to group similar queries by intent and provide a single, comprehensive answer for each group.(If reference information is empty then provided best possible answer instead of not outputing the key values defined in output parser)\",\n  \"instructions\": \"Your Task (in order):\\n\\n1. **Identify Intent Clusters:** First, analyze the raw list of FAQs and Related Searches provided below. Group similar or overlapping questions and phrases together into logical clusters based on their core user intent.\\n\\n2. **Generate a Consolidated Answer for Each Cluster:** For each cluster you identified, write one single, clear, and comprehensive answer that satisfies all the queries within that cluster.\\n\\n3. **Integrate Keywords:** As you write each answer, naturally incorporate relevant keywords from the provided keyword data.\\n\\n**Here is the data you must use:**\",\n  \"faqs_and_related_data\": \"Raw User Queries (FAQs & Related Searches):\",\n  \"keyword_data\": \"Keyword Data to Integrate:\",\n  \"final_instruction\": \"Please provide a list of new, well-written sentences that answer each group of related questions. Keep in mind that these phrases need to be written in a way that they can be easily inserted into an existing article.(If reference information is empty then provided best possible answer instead of not outputing the key values defined in output parser)\"\n},\n    \"title_and_meta_description_generator\": {\n      \"system\": \"You are an advanced SEO Title & Meta Description Generator.\\nYour task is to create five unique and compelling variations of the title and meta description for the specified article.\\nUse the keyword data provided, including primary, secondary, title and FAQ keywords, to ensure each variation is optimized for SEO.\\nFollow best practices: Keep the title under 60 characters and the meta description under 155 characters and make sure each variant is clear, relevant and encourages clicks.\\nIncorporate the most important keywords in a natural way, avoid keyword stuffing and make sure each variant is unique.\\nThe result should be formatted as a list of five pairs of title and meta description that can be used directly.(If reference information is empty then provided best possible answer instead of not outputing the key values defined in output parser)\\n\",\n      \"instructions\": \"You will receive the following data:\\n\\nA set of primary, secondary, title and FAQ keywords (see below).\\n\\nYour task is to create five different SEO-optimized title and meta description pairs for the article. Each pair should:\\n\\nuse the specified keywords naturally\\nFollow SEO best practices (title under 60 characters, meta descriptions under 155 characters)\\nBe unique and engaging to encourage clicks\\nClearly reflect the topic of the article\",\n      \"keyword_data\": \"Here is the keyword data (primary keywords, secondary keywords, title keywords and faq keywords):\",\n      \"serp_data\": \"Here is the serp data (title, snppet, focus keyword, long-tail-keyword and n-gram-analysis):\",\n    },\n,\n\"formatter\": {\n  \"system\": \"You are a specialized and robust JSON-to-HTML converter. Your primary function is to transform JSON content into well-structured, semantic HTML. **CRITICAL RULE: The input JSON you receive may be invalid due to unescaped quotes or other syntax errors. Your first and most important job is to fix any syntax errors to make the JSON valid. Once the JSON is valid, then proceed with the HTML conversion.** Your output must be only the raw HTML.\",\n  \"instructions\": \"Convert the following JSON data into a semantic HTML report. For each top-level key in the JSON, create a section with an h2 header that is a human-readable version of the key name (e.g., 'index_and_pagespeed_analysis' becomes 'Index and Pagespeed Analysis'). Format the content within each section according to its structure, using lists and subsections where appropriate. Output only the raw HTML.\",\n  \"input_json_header\": \"Input JSON:\"\n}\n,\n\"content_optimization\": {\n  \"system\": \"You are an expert SEO Content Editor. Your main task is to analyze the provided article and all strategic SEO data to produce a comprehensive optimization plan. Your primary goals are to reorganize headings, rewrite weak intros/CTAs, improve keyword placement, and eliminate fluff to improve clarity.\",\n  \"instructions\": \"Your Task:\\n\\nYou are the final editor for this article. Your goal is to take all the strategic analysis provided below and produce a comprehensive, actionable optimization plan. Your plan must address these four key areas:\\n\\n1. **Heading Reorganization:** Based on the `article_analysis`, suggest any improvements to the H1-H3 heading structure for better clarity and SEO.\\n\\n2. **Intro & CTA Rewrite:** Analyze the first and last 100 words of the article (found in the `article_analysis`). Suggest specific rewrites to make the introduction more engaging and the conclusion's call-to-action (CTA) stronger.\\n\\n3. **Keyword Placement & Semantic Relevance:** For each main body paragraph in the `article_text`, identify at least two sentences that can be improved. Provide 2-3 alternative versions for each that naturally integrate keywords from the `keyword_data`.\\n\\n4. **Clarity & Readability:** As you suggest rewrites, focus on eliminating fluff. Also, suggest where the `seo_paragraphs` can be inserted into the `article_text` to answer user questions directly.\\n\\n**Here is all the data you need for your analysis:**\",\n  \"article_analysis\": \"1. The Initial Audit of the Article:\",\n  \"keyword_data\": \"2. The Final Keyword Strategy:\",\n  \"seo_paragraphs\": \"3. Ready-to-Use SEO Paragraphs:\",\n  \"article_text\": \"4. The Full Article Content:\",\n  \"final_instruction\": \"Please provide a detailed, structured report of your recommended changes.\"\n}\n  }\n}\n\"\"\"",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a specialized AI Prompt Translation Agent. Your task is to translate prompt templates while preserving all technical placeholders (variables) in their original form.\n\nRules:\n1. NEVER translate anything enclosed in |...| - these are placeholders\n2. Maintain the exact same placeholder positions in the translated text\n3. Preserve the semantic meaning and intent of the prompts\n4. Return results in a structured JSON format\n5. Maintain any technical terms in their original form\n6. Preserve any markdown or formatting syntax\n\nFor each prompt:\n1. Identify all placeholders\n2. Translate the surrounding text\n3. Reconstruct the prompt maintaining the original structure\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -6960,
        2720
      ],
      "id": "43276856-1cba-4768-95bb-f325e833a75f",
      "name": "Interpreter",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Interpreter').item.json.output.formatter.instructions }}\n\n{{ $('Interpreter').item.json.output.formatter.input_json_header }}\n{{ JSON.stringify($json, null, 2) }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "={{ $('Interpreter').item.json.output.formatter.system }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -3920,
        2820
      ],
      "id": "05dadc16-e577-43ff-9c03-a48d23e8c382",
      "name": "Formatter"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=\n{{ $('Interpreter').item.json.output.title_and_meta_description_generator.instructions }}\n\n{{ $('Interpreter').item.json.output.title_and_meta_description_generator.keyword_data }}\n{{ JSON.stringify($('Set Key #11').all()[0].json, null, 2) }}\n\n\n{{ $('Interpreter').item.json.output.title_and_meta_description_generator.serp_data }}\n{{ JSON.stringify($('Set Key #9').all()[0].json, null, 2) }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "={{ $('Interpreter').item.json.output.title_and_meta_description_generator.system }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -5060,
        2720
      ],
      "id": "ca260aaf-092e-46c0-aa44-82a34e05aca4",
      "name": "Title & Meta Description Generator",
      "executeOnce": true,
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output.keyword_rank_tracking_analyzer.instructions }}\n\n{{ $json.output.keyword_rank_tracking_analyzer.keyword_data }}\n{{ JSON.stringify($('Set Key #8').item?.json.keyword_ranking || \"There's No tracking data for target keyword for the selected period in our bigquery table.\", null, 2) }}\n\n",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "={{ $json.output.keyword_rank_tracking_analyzer.system }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -6380,
        3180
      ],
      "id": "3d2e2363-c93e-489f-9a14-47cf281972ac",
      "name": "Keyword Rank Tracking Analysis",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Interpreter').item.json.output.faqs_and_related_searches_analyzer.instructions }}\n{{ $('Interpreter').item.json.output.faqs_and_related_searches_analyzer.faqs_and_related_data }}\n\n{{ JSON.stringify($('Set Key #6').item?.json || \"No FAQs available.\") }}\n{{ JSON.stringify($('Set Key #4').item?.json || \"No Related Searches available.\") }}\n\n{{ $('Interpreter').item.json.output.faqs_and_related_searches_analyzer.keyword_data }}\n{{ JSON.stringify($('Keyword & Insights Analysis').item?.json.output || \"No keyword strategy available.\") }}\n\n{{ $('Interpreter').item.json.output.faqs_and_related_searches_analyzer.final_instruction }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "={{ $('Interpreter').item.json.output.faqs_and_related_searches_analyzer.system }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -6020,
        2560
      ],
      "id": "8eab31e2-e52e-405b-800e-8174e80746f0",
      "name": "FAQs & Related Searches Analysis",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output.keyword_performance_analyzer.instructions }}\n\n{{ $json.output.keyword_performance_analyzer.general_performance }}\n{{ JSON.stringify($('Set Key #5').item?.json || \"No base performance data available.\", null, 2) }}\n\n{{ $json.output.keyword_performance_analyzer.position_distribution }}\n{{ JSON.stringify($('Set Key #').item?.json || \"No position distribution data available.\", null, 2) }}\n\n{{ $json.output.keyword_performance_analyzer.query_performance }}\n{{ JSON.stringify($('Set Key #7').item?.json || \"No query opportunity data available.\", null, 2) }}\n\n{{ $json.output.keyword_performance_analyzer.final_instruction }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "={{ $json.output.keyword_performance_analyzer.system }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -6460,
        2820
      ],
      "id": "744c5a86-8102-4cb7-87c8-da347b351518",
      "name": "Keyword & Insights Analysis",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $json.output.serp_analyzer.instructions }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "={{ $json.output.serp_analyzer.system }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -6420,
        2280
      ],
      "id": "0fd554bb-8828-4bf8-aa5e-306a510a7ccf",
      "name": "SERP Analysis",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=\n\n{{ $json.output.index_and_pagespeed_analyzer.instructions }}\n\n{{ JSON.stringify($('Aggregate7').item?.json || \"No PageSpeed or Index data was available for analysis.\", null, 2) }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "={{ $json.output.index_and_pagespeed_analyzer.system }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -5020,
        2320
      ],
      "id": "d051aafa-f5a2-4a90-84fb-4cb22d0285ab",
      "name": "Pagespeed Analysis",
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output.article_analyzer.instructions }}\n\n{{ $json.output.article_analyzer.focus_keyword }}\n{{ JSON.stringify($('Parse Data').first()?.json.article_data.focus_keyword || \"No focus keyword provided.\", null, 2) }}\n\n{{ $json.output.article_analyzer.secondary_keywords }}\n{{ JSON.stringify($items('Keyword & Insights Analysis')[0]?.json.output.secondary_keywords || \"No secondary keywords were generated.\", null, 2) }}\n\n{{ $json.output.article_analyzer.article }}\n{{ JSON.stringify($('Parse Data #10').item?.json || \"Article content could not be crawled.\", null, 2) }}\n\n{{ $json.output.article_analyzer.final_instruction }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "={{ $json.output.article_analyzer.system }}"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -6380,
        3580
      ],
      "id": "dcf5a6c0-72e6-4347-855c-1b0a92aa5c47",
      "name": "Article Analysis",
      "retryOnFail": true,
      "waitBetweenTries": 4000
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o4-mini",
          "mode": "list",
          "cachedResultName": "o4-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -6960,
        3000
      ],
      "id": "a7348692-9ae3-4c03-b305-28bb482ba027",
      "name": "GPT-4o-mini #1",
      "credentials": {
        "openAiApi": {
          "id": "EIPdk61I9qMM3ghW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"index_and_pagespeed_analyzer\": {\n    \"system\": \"\",\n    \"instructions\": \"\"\n  },\n  \"serp_analyzer\": {\n    \"system\": \"\",\n    \"instructions\": \"\"\n  },\n  \"keyword_performance_analyzer\": {\n    \"system\": \"\",\n    \"instructions\": \"\",\n    \"general_performance\": \"\",\n    \"position_distribution\": \"\",\n    \"query_performance\": \"\",\n    \"final_instruction\": \"\"\n  },\n  \"keyword_rank_tracking_analyzer\": {\n    \"system\": \"\",\n    \"instructions\": \"\",\n    \"keyword_data\": \"\"\n  },\n  \"article_analyzer\": {\n    \"system\": \"\",\n    \"instructions\":\"\",\n    \"data\": \"\",\n    \"focus_keyword\": \"\",\n    \"secondary_keywords\": \"\",\n    \"article\": \"\",\n    \"analysis\": \"\",\n    \"final_instruction\": \"\"\n  },\n  \"faqs_and_related_searches_analyzer\": {\n    \"system\": \"\",\n    \"instructions\": \"\",\n    \"faqs_and_related_data\": \"\",\n    \"keyword_data\": \"\",\n    \"final_instruction\": \"\"\n  },\n  \"title_and_meta_description_generator\": {\n    \"system\": \"\",\n    \"instructions\": \"\",\n    \"keyword_data\": \"\",\n    \"serp_data\": \"\"\n  },\n  \"content_optimization\": {\n    \"system\": \"\",\n    \"instructions\": \"\",\n    \"article_analysis\": \"\",\n    \"keyword_data\": \"\",\n    \"seo_paragraphs\": \"\",\n    \"article_text\": \"\",\n    \"final_instruction\":\"\"\n  },\n  \"formatter\":{\n    \"system\":\"\",\n    \"instructions\":\"\",\n    \"input_json_header\":\"\"   \n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -6800,
        2960
      ],
      "id": "73e0612f-8e93-442c-adab-3e4a485a7085",
      "name": "Structured Output Parser #1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {
          "maxRetries": 3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -6440,
        2480
      ],
      "id": "1e7bfbb8-651c-403e-999a-a5ea4ebbaf15",
      "name": "GPT-4.1-mini #1",
      "credentials": {
        "openAiApi": {
          "id": "EIPdk61I9qMM3ghW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title_analysis\": \"\",\n  \"snippet_analysis\": \"\",\n  \"focus_keyword_analysis\": \"\",\n  \"long_tail_keyword_analysis\": \"\",\n  \"n_gram_analysis\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -6120,
        2440
      ],
      "id": "aca2cc03-2428-456c-9a11-3992a4371d3e",
      "name": "Structured Output Parser #2"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"primary_keywords\": \"\",\n  \"secondary_keywords\": \"\",\n  \"title_keywords\": \"\",\n  \"faq_keywords\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -6180,
        3020
      ],
      "id": "a57b24cd-7258-49e3-bfd1-aac879ad63da",
      "name": "Structured Output Parser #3"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -6420,
        2960
      ],
      "id": "4356ea19-65d4-4174-8f39-97b0ba0a9630",
      "name": "GPT-4o-mini #2",
      "credentials": {
        "openAiApi": {
          "id": "EIPdk61I9qMM3ghW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -6460,
        3420
      ],
      "id": "8f4fcf97-b5b0-4320-886b-14c3739983c1",
      "name": "GPT-4o-mini #3",
      "credentials": {
        "openAiApi": {
          "id": "EIPdk61I9qMM3ghW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"keyword_analysis\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -6240,
        3440
      ],
      "id": "ada7f210-d6cb-4ea2-8439-7fc178e95c82",
      "name": "Structured Output Parser #4"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -6560,
        3840
      ],
      "id": "73cc3578-bff6-4843-808d-42c46bb2891c",
      "name": "GPT-4o-mini #4",
      "credentials": {
        "openAiApi": {
          "id": "EIPdk61I9qMM3ghW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"title_analysis\": \"\",\n  \"meta_description_analysis\": \"\",\n  \"headings_analysis\": \"\",\n  \"content_summary\": \"\",\n  \"first_100_words_analysis\": \"\",\n  \"last_100_words_analysis\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -6200,
        3780
      ],
      "id": "80b3d2af-c74c-4c19-91dd-570af8fad17f",
      "name": "Structured Output Parser #5"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -6000,
        2760
      ],
      "id": "5dfaac8e-7cad-4ba1-a17d-258b44bb07c7",
      "name": "GPT-4o-mini #5",
      "credentials": {
        "openAiApi": {
          "id": "EIPdk61I9qMM3ghW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"sentences\": [\n      \"sentence 1\",\n      \"sentences 2\",\n      \"sentences 3\",\n      \"sentences 4\",\n      \"sentences 5\",\n      \"sentences 6\",\n      \"sentences 7\",\n      \"sentences n\"\n    ]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -5800,
        2760
      ],
      "id": "a3a600d9-ffaa-4bf7-a904-c345ca4c6279",
      "name": "Structured Output Parser #6"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -5080,
        2580
      ],
      "id": "4c024a00-a28b-4848-9421-c304d0d28c0d",
      "name": "GPT-4o-mini #6",
      "credentials": {
        "openAiApi": {
          "id": "EIPdk61I9qMM3ghW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -5080,
        2920
      ],
      "id": "7a4df705-f59a-4e4f-ae00-0e4824dbcb3c",
      "name": "GPT-4o-mini #7",
      "credentials": {
        "openAiApi": {
          "id": "EIPdk61I9qMM3ghW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -5120,
        3580
      ],
      "id": "a4e18ca3-04d5-4630-95e3-06a2cc31c358",
      "name": "GPT-4o-mini #8",
      "credentials": {
        "openAiApi": {
          "id": "EIPdk61I9qMM3ghW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -3920,
        3040
      ],
      "id": "5be5f199-7dfe-44b3-b02a-5a8e56a02b78",
      "name": "GPT-4o-mini #9",
      "credentials": {
        "openAiApi": {
          "id": "EIPdk61I9qMM3ghW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n    \"title_1\": \"string\",\n    \"title_2\": \"string\",\n    \"title_3\": \"string\",\n    \"title_4\": \"string\",\n    \"title_5\": \"string\",\n\t\"meta_description_1\": \"string\",\n  \t\"meta_description_2\": \"string\",\n  \t\"meta_description_3\": \"string\",\n  \t\"meta_description_4\": \"string\",\n  \t\"meta_description_5\": \"string\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -4840,
        2940
      ],
      "id": "b1c8a19f-013e-4ac8-a228-12e53421c02d",
      "name": "Structured Output Parser #7"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"heading_recommendations\": \"string\",\n  \"intro_cta_recommendations\": \"string\",\n  \"paragraph_improvements\": [\n    {\n      \"paragraph_header\": \"string\",\n      \"improvements\": [\n        {\n          \"current_sentence\": \"string\",\n          \"alternatives\": [\n            \"string\",\n            \"string\"\n          ]\n        }\n      ]\n    }\n  ],\n  \"faq_placement_suggestions\": \"string\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        -4820,
        3460
      ],
      "id": "8078d364-7cd0-47ad-b4b3-a87f70988436",
      "name": "Structured Output Parser #8"
    },
    {
      "parameters": {
        "name": "={{ $now.toFormat('yyyy-MM-dd') }} - SEO Report - {{ $('Parse Data').first().json.article_data.focus_keyword }}.html",
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list",
          "cachedResultName": "My Drive",
          "cachedResultUrl": "https://drive.google.com/drive/my-drive"
        },
        "folderId": {
          "__rl": true,
          "value": "root",
          "mode": "list",
          "cachedResultName": "/ (Root folder)",
          "cachedResultUrl": "https://drive.google.com/drive"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3160,
        2820
      ],
      "id": "72616ce1-d5ef-464a-a3d9-aa20335413df",
      "name": "Save SEO Report",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "56WE2wzIyXjQ1Dyj",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {
          "fileName": "test.html",
          "mimeType": "={{ $json.mimetype }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3360,
        2820
      ],
      "id": "e19f1010-b92b-488c-ae16-d9f7bcb42758",
      "name": "Convert to HTML"
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      base64: Buffer.from($input.all()[0].json.output).toString('base64'),\n      mimetype: \"text/html\"\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3540,
        2820
      ],
      "id": "2a9beca1-ff1c-499b-b2f3-40cd2448c671",
      "name": "Convert to Base64"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 8,
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -4160,
        2740
      ],
      "id": "5b555c06-7d29-4794-9ec8-2ea9ef076110",
      "name": "Merge Final Report Data"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d6f45dfe-6ece-459f-b987-0fd9b9ec022a",
              "name": "serp_analysis",
              "value": "={{ $json.output }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5940,
        2280
      ],
      "id": "951c7ab1-46e2-4326-81bb-203b27496fcb",
      "name": "Set Key #9"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a86011bb-885b-4fe5-b1fd-e1018ae9b9ed",
              "name": "faq_and_related_searches_analysis",
              "value": "={{ $json.output }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5660,
        2660
      ],
      "id": "cccb2ac1-cb3e-4fd9-809f-eb4c3bae454d",
      "name": "Set Key #10"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ea2b436e-f850-4c90-be1d-0c67d78deed9",
              "name": "keyword_analysis",
              "value": "={{ $json.output }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -6000,
        2940
      ],
      "id": "43ea8870-45dd-4a58-9008-719a6fe847c7",
      "name": "Set Key #11"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "37d3e71f-e913-4220-a9c1-43475bddf128",
              "name": "keyword_analysis",
              "value": "={{ $json.output.keyword_analysis }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -5960,
        3140
      ],
      "id": "630cacfd-6104-486a-a6b8-7e94dfb57fd9",
      "name": "Set Key #12"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "48b0abed-14e3-4a0b-837e-1dd546e3daa7",
              "name": "article_analysis",
              "value": "={{ $json.output }}",
              "type": "object"
            },
            {
              "id": "9148a614-096b-4764-9bdf-3f84289ad11f",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -6020,
        3580
      ],
      "id": "6714c4e8-a722-4d3b-a51d-67b40abb4673",
      "name": "Set Key #13"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dba89cf5-1d8f-4069-93f6-092c79541c73",
              "name": "index_and_pagespeed_analysis",
              "value": "={{ $json.output }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4600,
        2400
      ],
      "id": "7cce335c-18e5-42a1-9b5c-2bdc9d59d551",
      "name": "Set Key #14"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "622d0fc9-4fb7-49dc-8635-826115ee1b6f",
              "name": "title_and_meta_description",
              "value": "={{ $json.output }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4620,
        2660
      ],
      "id": "18d63843-d215-4b9f-ae3c-9d516f4cad81",
      "name": "Set Key #15",
      "executeOnce": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "21f82008-a688-4cf2-b727-6f544db024cf",
              "name": "content_optimization",
              "value": "={{ $json.output }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -4580,
        3100
      ],
      "id": "5e87a642-ab3f-46ac-a4b9-c94581903d33",
      "name": "Set Key #16"
    },
    {
      "parameters": {
        "content": "# Store Report in Google Drive",
        "height": 1740,
        "width": 640,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3580,
        2200
      ],
      "id": "2f02018b-959e-45a8-b43f-c9b462121a18",
      "name": "Sticky Note13"
    },
    {
      "parameters": {
        "content": "# SEO Team\n",
        "height": 1940,
        "width": 4380,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -7160,
        2120
      ],
      "id": "9116b02a-de93-418f-b875-b776408f038c",
      "name": "Sticky Note21"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 10,
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -7080,
        2680
      ],
      "id": "6d627070-0277-4202-a03c-c9dd2fe0fcc9",
      "name": "Merge SEO Team Data1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "content": "# Translation",
        "height": 1740,
        "width": 420,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -7040,
        2200
      ],
      "id": "423839d4-6d6b-4d47-8fe2-8c3a0b0461ce",
      "name": "Sticky Note22",
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Data Analysis\n",
        "height": 1740,
        "width": 1320,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -6580,
        2200
      ],
      "id": "c449c42d-3a7e-4af4-a9b6-f1f201380f97",
      "name": "Sticky Note23",
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Article Optimization",
        "height": 1740,
        "width": 1240,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -5220,
        2200
      ],
      "id": "7306d677-4881-4578-ac07-6f54abcb3509",
      "name": "Sticky Note26",
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Formatting",
        "height": 1740,
        "width": 360,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -3960,
        2200
      ],
      "id": "8bf8883b-4ef7-44a0-9954-1195b18f54b5",
      "name": "Sticky Note27",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d7bc8adb-a4eb-4956-b4c7-870cc0126c68",
              "name": "spreedsheet_id",
              "value": "={{ $items(\"Merge Workflow Data1\")[2].json.spreadsheet_meta_data[0].spreadsheetId }}",
              "type": "string"
            },
            {
              "id": "463ce7d3-eef6-45e5-8fb2-fbe98e130e07",
              "name": "spreadsheet_url",
              "value": "={{ $items(\"Merge Workflow Data1\")[2].json.spreadsheet_meta_data[0].spreadsheetUrl }}",
              "type": "string"
            },
            {
              "id": "a8760639-7607-4bb4-811e-3da3cb05c5d6",
              "name": "url_search_expression",
              "value": "={{ $items(\"Merge Workflow Data1\")[0].json.url_search_expression }}",
              "type": "string"
            },
            {
              "id": "6c5382fa-839b-4df6-a620-ca2f9121cfc0",
              "name": "sheets_serp_analysis",
              "value": "={{ $items(\"Merge Workflow Data1\")[2].json.spreadsheet_meta_data[0].sheets[0].properties.title }}",
              "type": "string"
            },
            {
              "id": "48a046c5-79de-4c76-9dad-c3d20b00774d",
              "name": "sheets_faqs",
              "value": "={{ $items(\"Merge Workflow Data1\")[2].json.spreadsheet_meta_data[0].sheets[1].properties.title }}",
              "type": "string"
            },
            {
              "id": "b27e8b89-b251-4e65-a23c-f7a225999a2b",
              "name": "sheets_related_searches",
              "value": "={{ $items(\"Merge Workflow Data1\")[2].json.spreadsheet_meta_data[0].sheets[2].properties.title }}",
              "type": "string"
            },
            {
              "id": "528f1ad1-6741-486a-9671-e93a65e6b4dd",
              "name": "sheets_base_performance",
              "value": "={{ $items(\"Merge Workflow Data1\")[2].json.spreadsheet_meta_data[0].sheets[3].properties.title }}",
              "type": "string"
            },
            {
              "id": "53df6de0-65d2-4bd9-83f2-87ca0fc8eb07",
              "name": "sheets_position_distriibution",
              "value": "={{ $items(\"Merge Workflow Data1\")[2].json.spreadsheet_meta_data[0].sheets[4].properties.title  }}",
              "type": "string"
            },
            {
              "id": "55da10ff-6e92-478b-9ff7-ebdc4a956b5c",
              "name": "query_opportunities",
              "value": "={{ $items(\"Merge Workflow Data1\")[2].json.spreadsheet_meta_data[0].sheets[5].properties.title }}",
              "type": "string"
            },
            {
              "id": "5b6684c8-8f44-4b29-a28c-5bd7ed1a00ab",
              "name": "keyword_tracking",
              "value": "={{ $items(\"Merge Workflow Data1\")[2].json.spreadsheet_meta_data[0].sheets[6].properties.title }}",
              "type": "string"
            },
            {
              "id": "e75009f7-8f0d-41a1-8110-ea545273f06b",
              "name": "index_status_and_pagespeed",
              "value": "={{ $items(\"Merge Workflow Data1\")[2].json.spreadsheet_meta_data[0].sheets[7].properties.title }}",
              "type": "string"
            },
            {
              "id": "72f31095-1617-4bcb-b417-00896309d5dd",
              "name": "bigquery_table",
              "value": "={{ $items(\"Merge Workflow Data1\")[0].json.url_search_expression }}",
              "type": "string"
            },
            {
              "id": "8deac754-6b2b-4de6-a739-8766f800b51a",
              "name": "url",
              "value": "={{ $items(\"Merge Workflow Data1\")[1].json.article_data.url}}",
              "type": "string"
            },
            {
              "id": "79d77d06-a0f3-4d62-8779-6cfae8942e4b",
              "name": "focus_keyword",
              "value": "={{ $items(\"Merge Workflow Data1\")[1].json.article_data.focus_keyword}}",
              "type": "string"
            },
            {
              "id": "031a704c-f26c-499e-a8c4-a21f1b861e43",
              "name": "country",
              "value": "={{ $items(\"Merge Workflow Data1\")[1].json.article_data.country}}",
              "type": "string"
            },
            {
              "id": "55a8682f-a70b-488d-8184-ef2482cb79c2",
              "name": "period_length",
              "value": "={{ $items(\"Merge Workflow Data1\")[1].json.article_data.period_length}}",
              "type": "number"
            },
            {
              "id": "344ee265-15bb-46ea-8085-5f7bb10f1041",
              "name": "target_keywords",
              "value": "={{ $items(\"Merge Workflow Data1\")[1].json.article_data.target_keywords}}",
              "type": "string"
            },
            {
              "id": "23e2dd75-a721-45ff-93d9-12c2dfdb320e",
              "name": "language",
              "value": "={{ $items(\"Merge Workflow Data1\")[1].json.article_data.language}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -11380,
        2680
      ],
      "id": "195bb267-f828-4d4e-8326-457b65291d1e",
      "name": "Set Workflow Data1(Originall)",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "89f58cc0-4df4-4130-a323-1c5afc7e17aa",
              "leftValue": "={{ $json.query }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -8220,
        440
      ],
      "id": "99dabb0b-f618-465b-96a6-60317e9703d3",
      "name": "has data?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6bd05f0c-d22f-4cca-9cc9-ba958e6eb7f4",
              "leftValue": "={{ $json.question }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "375401e3-2732-4bf1-be62-88ea70414d0a",
              "leftValue": "={{ $json.text_blocks }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": "",
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -8040,
        1100
      ],
      "id": "18e7a24b-b566-4a31-9450-22d5daecbc36",
      "name": "has data to insert?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "636c3479-8643-4c3d-ab50-c2950942d68b",
              "leftValue": "={{ $json.date }}",
              "rightValue": "",
              "operator": {
                "type": "dateTime",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -9700,
        3600
      ],
      "id": "7dc82b0f-31b6-4773-9f5d-df0a889342fe",
      "name": "table contains target keyword data?"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "636c3479-8643-4c3d-ab50-c2950942d68b",
              "leftValue": "={{ $json.url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -9780,
        2980
      ],
      "id": "e4284943-0f3c-4174-a198-4819bdc6713f",
      "name": "table contains target keyword data?1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "636c3479-8643-4c3d-ab50-c2950942d68b",
              "leftValue": "={{ $json.url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -9760,
        3180
      ],
      "id": "e4ec0905-23ef-4d8c-ba40-63e2e00c747c",
      "name": "table contains target keyword data?2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "636c3479-8643-4c3d-ab50-c2950942d68b",
              "leftValue": "={{ $json.url || $json.body?.url || $json.data?.url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "2c4edb41-e94e-4ed1-b74b-f0d6ba755c1a",
              "leftValue": "={{ $json.url || $json.body?.url || $json.data?.url }}",
              "rightValue": "^https?://\\S+$",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            },
            {
              "id": "3bd104ee-d30a-4753-a6f0-3b248e015736",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -9780,
        3400
      ],
      "id": "7415943c-644b-4cb3-8f04-ff34451f3b48",
      "name": "table contains target keyword data?3",
      "alwaysOutputData": false
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -9320,
        3060
      ],
      "id": "d0d61fa8-a1ea-43ad-9076-ee76aae6b8cf",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -9320,
        3240
      ],
      "id": "71f3860d-ef58-450c-9c1f-7d0c8b7a5279",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -9320,
        3440
      ],
      "id": "0abe0e12-03c1-4bfb-af7a-2279ae342e61",
      "name": "No Operation, do nothing2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -9400,
        3700
      ],
      "id": "72d3be4d-5960-4cd2-9716-2044685ed807",
      "name": "No Operation, do nothing3"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -8000,
        420
      ],
      "id": "538b0c22-2830-4756-8ced-ca609542b911",
      "name": "No Operation, do nothing4"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -7960,
        840
      ],
      "id": "44e9b009-79c8-4bff-ade2-3a2b46661a61",
      "name": "No Operation, do nothing5"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "95d690e7-bd16-423a-bd67-40483ffb2ec4",
              "leftValue": "={{ $json.question }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -8400,
        920
      ],
      "id": "ea20026c-2f49-4687-b248-735d15dcf374",
      "name": "If"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -5320,
        2660
      ],
      "id": "25a9f892-2e53-4b3d-9665-78c851724529",
      "name": "Merge"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 4,
        "options": {
          "includeUnpaired": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -5300,
        3240
      ],
      "id": "9437fdc6-02b0-4d71-93a2-7d073e9b2ba9",
      "name": "content-optimisation-data",
      "executeOnce": false,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "read competitor's insight in this Google Sheets",
        "documentId": {
          "__rl": true,
          "value": "={{  $items(\"Create Report Sheet1\")[0].json.spreadsheetId}}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "={{ $('Create Report Sheet1').item.json.sheets[0].properties.title }}",
          "mode": "name"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.5,
      "position": [
        -6360,
        3820
      ],
      "id": "0bc0e6a6-bf60-46f7-ad9f-51d1f4b8883c",
      "name": "Read competitor's  analysis",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "fK8lELKZIRzBTDHa",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const formData = $('On form submission1').first().json ?? {};\nconst defaults = $('Get Article Metadata1').first().json ?? {};\nconst countryItems = $('Load Country Codes').all();\nconst countryTable = countryItems.map(i => i.json);\n\n// --------- config ----------\nconst allowedKeys = ['url','focus_keyword','country','period_length','target_keywords','language'];\n\nconst keyMapping = {\n  'URL': 'url',\n  'Focus Keyword': 'focus_keyword',\n  'Country': 'country',\n  'Period Length': 'period_length',\n  'Target Keywords': 'target_keywords',\n  'Language': 'language',\n};\n\n// --------- helpers ----------\nconst isFilled = (v) => v !== undefined && v !== null && String(v).trim() !== '';\n\nconst toArray = (v) => {\n  if (Array.isArray(v)) return v.filter(Boolean).map(s => String(s).trim()).filter(Boolean);\n  if (v === undefined || v === null) return [];\n  return String(v)\n    .split(',')\n    .map(s => s.trim())\n    .filter(Boolean);\n};\n\nfunction normalizeCountry(input, table) {\n  if (!input) return '';\n  const s = String(input).trim();\n\n  // if already a 2-letter code, trust it if present in table\n  if (/^[A-Za-z]{2}$/.test(s)) {\n    const hit = table.find(r => r.country_code.toLowerCase() === s.toLowerCase());\n    return hit ? hit.country_code : s.toLowerCase();\n  }\n\n  const aliasMap = {\n    'us': 'united states',\n    'usa': 'united states',\n    'united states of america': 'united states',\n    'america':'united states',\n    'uk': 'united kingdom',\n    'gb': 'united kingdom',\n    'uae': 'united arab emirates',\n    'bharat': 'india'\n  };\n\n  const normalizedInput = s.toLowerCase();\n  const canonicalName = aliasMap[normalizedInput] || normalizedInput;\n\n  const hitByName = table.find(r => r.country_name.toLowerCase() === canonicalName);\n  if (hitByName) return hitByName.country_code;\n\n  const hitPartial = table.find(r => r.country_name.toLowerCase().includes(s.toLowerCase()));\n  if (hitPartial) return hitPartial.country_code;\n\n  return s; // fallback\n}\n\nfunction getFormValue(stdKey) {\n  const formKey = Object.keys(keyMapping).find(k => keyMapping[k] === stdKey);\n  return formKey ? formData[formKey] : undefined;\n}\n\n// --------- merge logic ----------\nconst mergedData = allowedKeys.reduce((acc, key) => {\n  const formVal = getFormValue(key);\n  const defaultVal = defaults[key];\n\n  if (key === 'target_keywords') {\n    // Use form only if it's actually filled; otherwise fall back to defaults.\n    const chosen = isFilled(formVal) ? formVal : defaultVal;\n    acc[key] = toArray(chosen);\n  } else if (key === 'country') {\n    const formCountry = (isFilled(formVal) ? formVal : '').toString().trim();\n    const defaultCountry = (isFilled(defaultVal) ? defaultVal : '').toString().trim();\n    const countryIn = formCountry || defaultCountry; // prefer form if filled, else default\n    acc[key] = normalizeCountry(countryIn, countryTable);\n  } else if (key === 'url') {\n    let urlValue = (isFilled(formVal) ? formVal : (defaultVal ?? '')).toString().trim();\n    if (urlValue && !urlValue.startsWith('http')) {\n      urlValue = 'https://' + urlValue;\n    }\n    acc[key] = urlValue;\n  } else {\n    // generic fields: prefer filled form value, otherwise default\n    acc[key] = isFilled(formVal) ? formVal : (defaultVal ?? '');\n  }\n\n  return acc;\n}, {});\n\n// --------- validation ----------\nconst required = ['url','focus_keyword','country','period_length','language']; // target_keywords may be []\nconst emptyFields = required.filter(k => {\n  const v = mergedData[k];\n  return v === undefined || v === null || String(v).trim() === '';\n});\n\nif (emptyFields.length > 0) {\n  throw new Error(`Required fields are missing: ${emptyFields.join(', ')}`);\n}\n\n// --------- output ----------\nreturn [{ json: { article_data: mergedData } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -11900,
        2640
      ],
      "id": "84496b93-b3c4-4046-80d3-2b4c73613c63",
      "name": "Parse Data",
      "retryOnFail": false,
      "waitBetweenTries": 100,
      "maxTries": 2
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "spreadsheet_meta_data",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        -11900,
        2840
      ],
      "id": "0ac172a0-32f2-40fa-b07b-2bcb1dbeb2d5",
      "name": "Set Key #17",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"url_search_expression\":\"{{ $json.search_data_url_impression }}\" ,\n  \"site_search_expression\": \"{{ $json.searchdata_site_impression }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -11900,
        2460
      ],
      "id": "864799b2-5d37-4983-83e1-8d958aa3bc4e",
      "name": "Set Key #18",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "content": "# Get & Set Workflow Data",
        "height": 640,
        "width": 1640,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -12480,
        2340
      ],
      "id": "7cd2762e-ee3b-4455-b874-b0fcd60e0d6d",
      "name": "Sticky Note28"
    },
    {
      "parameters": {
        "content": "# Workflow Preparation",
        "height": 960,
        "width": 2180,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -12860,
        2180
      ],
      "id": "c39dae0f-6d59-4972-ad05-810a49a69776",
      "name": "Sticky Note1"
    }
  ],
  "pinData": {},
  "connections": {
    "Create Report Sheet1": {
      "main": [
        [
          {
            "node": "Set Key #17",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission1": {
      "main": [
        [
          {
            "node": "Get BigQuery Table Names1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Article Metadata1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create Report Sheet1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get BigQuery Table Names1": {
      "main": [
        [
          {
            "node": "Set Key #18",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Article Metadata1": {
      "main": [
        [
          {
            "node": "Load Country Codes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Workflow Data1": {
      "main": [
        [
          {
            "node": "Set Workflow Data1(Originall)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Content": {
      "main": [
        [
          {
            "node": "Parse Data #8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Mobile SERPs": {
      "main": [
        [
          {
            "node": "Parse Data #1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Desktop SERPs": {
      "main": [
        [
          {
            "node": "Parse Data #7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Data #1": {
      "main": [
        [
          {
            "node": "Get Related Searches Mobile",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Orgnaic Results Mobile",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get FAQs Mobile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Data #7": {
      "main": [
        [
          {
            "node": "Get Organic Results Desktop",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get FAQs Desktop",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Related Searches Desktop",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get FAQs Mobile": {
      "main": [
        [
          {
            "node": "Merge FAQs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Orgnaic Results Mobile": {
      "main": [
        [
          {
            "node": "Top N Mobile Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Organic Results Desktop": {
      "main": [
        [
          {
            "node": "Top N Desktop Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get FAQs Desktop": {
      "main": [
        [
          {
            "node": "Merge FAQs",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Related Searches Desktop": {
      "main": [
        [
          {
            "node": "Merge Related Searches",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Related Searches Mobile": {
      "main": [
        [
          {
            "node": "Merge Related Searches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Related Searches": {
      "main": [
        [
          {
            "node": "Set Key #4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicated Searches": {
      "main": [
        [
          {
            "node": "has data?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Related Searches": {
      "main": [
        [
          {
            "node": "Extract All Search Queries",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge FAQs": {
      "main": [
        [
          {
            "node": "Get Questions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Questions": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicated Questions": {
      "main": [
        [
          {
            "node": "has data to insert?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert FAQs": {
      "main": [
        [
          {
            "node": "Set Key #6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Top N Mobile Pages": {
      "main": [
        [
          {
            "node": "Merge Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Top N Desktop Pages": {
      "main": [
        [
          {
            "node": "Merge Pages",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Pages": {
      "main": [
        [
          {
            "node": "Get Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Pages": {
      "main": [
        [
          {
            "node": "Remove Duplicated Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicated Pages": {
      "main": [
        [
          {
            "node": "Limit Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit Pages": {
      "main": [
        [
          {
            "node": "Get Links",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Links": {
      "main": [
        [
          {
            "node": "Loop Over Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Pages": {
      "main": [
        [
          {
            "node": "Merge SEO Team Data1",
            "type": "main",
            "index": 2
          }
        ],
        [
          {
            "node": "Get Page Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Page Content": {
      "main": [
        [
          {
            "node": "Was Crawl Successful?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Article Metadata #1": {
      "main": [
        [
          {
            "node": "Analyze Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Data #8": {
      "main": [
        [
          {
            "node": "Insert SERP Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert SERP Analysis": {
      "main": [
        [
          {
            "node": "Loop Over Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Country Codes": {
      "main": [
        [
          {
            "node": "Parse Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Inspect URL": {
      "main": [
        [
          {
            "node": "Get Inspect URL Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Base Performance": {
      "main": [
        [
          {
            "node": "table contains target keyword data?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Position Distribution by Keywords": {
      "main": [
        [
          {
            "node": "table contains target keyword data?2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Query Opportunities": {
      "main": [
        [
          {
            "node": "table contains target keyword data?3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Target Keyword Performance": {
      "main": [
        [
          {
            "node": "table contains target keyword data?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Pagespeed & Index Data": {
      "main": [
        [
          {
            "node": "Aggregate7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Base Performance": {
      "main": [
        [
          {
            "node": "Set Key #5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Keyword Ranking": {
      "main": [
        [
          {
            "node": "Parse Data #",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Query Performance": {
      "main": [
        [
          {
            "node": "Parse Data #6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Position Distribution": {
      "main": [
        [
          {
            "node": "Parse Data #5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Inspect URL Keys": {
      "main": [
        [
          {
            "node": "Merge Index & Pagespeed Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Pagespeed Moible Keys": {
      "main": [
        [
          {
            "node": "Merge Index & Pagespeed Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Pagespeed Desktop Keys": {
      "main": [
        [
          {
            "node": "Merge Index & Pagespeed Data",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge Index & Pagespeed Data": {
      "main": [
        [
          {
            "node": "Insert Pagespeed & Index Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Keyword List as a String": {
      "main": [
        [
          {
            "node": "Target Keyword Performance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate6": {
      "main": [
        [
          {
            "node": "Merge SEO Team Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate7": {
      "main": [
        [
          {
            "node": "Merge SEO Team Data1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Pagespeed Check Mobile": {
      "main": [
        [
          {
            "node": "Get Pagespeed Moible Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Pagespeed Check Desktop": {
      "main": [
        [
          {
            "node": "Get Pagespeed Desktop Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Data #5": {
      "main": [
        [
          {
            "node": "Set Key #",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Data #6": {
      "main": [
        [
          {
            "node": "Set Key #7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Key #5": {
      "main": [
        [
          {
            "node": "Merge SEO Team Data1",
            "type": "main",
            "index": 6
          }
        ]
      ]
    },
    "Set Key #7": {
      "main": [
        [
          {
            "node": "Merge SEO Team Data1",
            "type": "main",
            "index": 8
          }
        ]
      ]
    },
    "Set Key #8": {
      "main": [
        [
          {
            "node": "Merge SEO Team Data1",
            "type": "main",
            "index": 9
          }
        ]
      ]
    },
    "Set Key #": {
      "main": [
        [
          {
            "node": "Merge SEO Team Data1",
            "type": "main",
            "index": 7
          }
        ]
      ]
    },
    "Parse Data #": {
      "main": [
        [
          {
            "node": "Set Key #8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract All Search Queries": {
      "main": [
        [
          {
            "node": "Remove Duplicated Searches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Was Crawl Successful?": {
      "main": [
        [
          {
            "node": "Get Article Metadata #1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Article Content1": {
      "main": [
        [
          {
            "node": "Was Crawl Successful?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Metadata From Article1": {
      "main": [
        [
          {
            "node": "Parse Data #10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Data #10": {
      "main": [
        [
          {
            "node": "Merge SEO Team Data1",
            "type": "main",
            "index": 5
          },
          {
            "node": "content-optimisation-data",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Was Crawl Successful?1": {
      "main": [
        [
          {
            "node": "Get Metadata From Article1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Optimization": {
      "main": [
        [
          {
            "node": "Set Key #16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "ai_tool": [
        [
          {
            "node": "SERP Analysis",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Interpreter": {
      "main": [
        [
          {
            "node": "Keyword & Insights Analysis",
            "type": "main",
            "index": 0
          },
          {
            "node": "SERP Analysis",
            "type": "main",
            "index": 0
          },
          {
            "node": "Keyword Rank Tracking Analysis",
            "type": "main",
            "index": 0
          },
          {
            "node": "Article Analysis",
            "type": "main",
            "index": 0
          },
          {
            "node": "Pagespeed Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatter": {
      "main": [
        [
          {
            "node": "Convert to Base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Title & Meta Description Generator": {
      "main": [
        [
          {
            "node": "Set Key #15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Keyword Rank Tracking Analysis": {
      "main": [
        [
          {
            "node": "Set Key #12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "FAQs & Related Searches Analysis": {
      "main": [
        [
          {
            "node": "Set Key #10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Keyword & Insights Analysis": {
      "main": [
        [
          {
            "node": "Set Key #11",
            "type": "main",
            "index": 0
          },
          {
            "node": "FAQs & Related Searches Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "SERP Analysis": {
      "main": [
        [
          {
            "node": "Set Key #9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pagespeed Analysis": {
      "main": [
        [
          {
            "node": "Set Key #14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Article Analysis": {
      "main": [
        [
          {
            "node": "Set Key #13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o-mini #1": {
      "ai_languageModel": [
        [
          {
            "node": "Interpreter",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser #1": {
      "ai_outputParser": [
        [
          {
            "node": "Interpreter",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4.1-mini #1": {
      "ai_languageModel": [
        [
          {
            "node": "SERP Analysis",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser #2": {
      "ai_outputParser": [
        [
          {
            "node": "SERP Analysis",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser #3": {
      "ai_outputParser": [
        [
          {
            "node": "Keyword & Insights Analysis",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o-mini #2": {
      "ai_languageModel": [
        [
          {
            "node": "Keyword & Insights Analysis",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o-mini #3": {
      "ai_languageModel": [
        [
          {
            "node": "Keyword Rank Tracking Analysis",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser #4": {
      "ai_outputParser": [
        [
          {
            "node": "Keyword Rank Tracking Analysis",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o-mini #4": {
      "ai_languageModel": [
        [
          {
            "node": "Article Analysis",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser #5": {
      "ai_outputParser": [
        [
          {
            "node": "Article Analysis",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o-mini #5": {
      "ai_languageModel": [
        [
          {
            "node": "FAQs & Related Searches Analysis",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser #6": {
      "ai_outputParser": [
        [
          {
            "node": "FAQs & Related Searches Analysis",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o-mini #6": {
      "ai_languageModel": [
        [
          {
            "node": "Pagespeed Analysis",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o-mini #7": {
      "ai_languageModel": [
        [
          {
            "node": "Title & Meta Description Generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o-mini #8": {
      "ai_languageModel": [
        [
          {
            "node": "Content Optimization",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o-mini #9": {
      "ai_languageModel": [
        [
          {
            "node": "Formatter",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser #7": {
      "ai_outputParser": [
        [
          {
            "node": "Title & Meta Description Generator",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser #8": {
      "ai_outputParser": [
        [
          {
            "node": "Content Optimization",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Convert to HTML": {
      "main": [
        [
          {
            "node": "Save SEO Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to Base64": {
      "main": [
        [
          {
            "node": "Convert to HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Final Report Data": {
      "main": [
        [
          {
            "node": "Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Key #9": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Final Report Data",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Set Key #10": {
      "main": [
        [
          {
            "node": "Merge Final Report Data",
            "type": "main",
            "index": 3
          },
          {
            "node": "content-optimisation-data",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Set Key #11": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          },
          {
            "node": "content-optimisation-data",
            "type": "main",
            "index": 1
          },
          {
            "node": "Merge Final Report Data",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Set Key #12": {
      "main": [
        [
          {
            "node": "Merge Final Report Data",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "Set Key #13": {
      "main": [
        [
          {
            "node": "Merge Final Report Data",
            "type": "main",
            "index": 1
          },
          {
            "node": "content-optimisation-data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Key #14": {
      "main": [
        [
          {
            "node": "Merge Final Report Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Key #15": {
      "main": [
        [
          {
            "node": "Merge Final Report Data",
            "type": "main",
            "index": 6
          }
        ]
      ]
    },
    "Set Key #16": {
      "main": [
        [
          {
            "node": "Merge Final Report Data",
            "type": "main",
            "index": 7
          }
        ]
      ]
    },
    "Merge SEO Team Data1": {
      "main": [
        [
          {
            "node": "Interpreter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Key #4": {
      "main": [
        [
          {
            "node": "Merge SEO Team Data1",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Set Key #6": {
      "main": [
        [
          {
            "node": "Merge SEO Team Data1",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Set Workflow Data1(Originall)": {
      "main": [
        [
          {
            "node": "Get Mobile SERPs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Desktop SERPs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Inspect URL",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Pagespeed Check Mobile",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Pagespeed Check Desktop",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Article Content1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Aggregate6",
            "type": "main",
            "index": 0
          },
          {
            "node": "Base Performance",
            "type": "main",
            "index": 0
          },
          {
            "node": "Position Distribution by Keywords",
            "type": "main",
            "index": 0
          },
          {
            "node": "Analyze Query Opportunities",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Keyword List as a String",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "has data?": {
      "main": [
        [
          {
            "node": "Insert Related Searches",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "has data to insert?": {
      "main": [
        [
          {
            "node": "Insert FAQs",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "table contains target keyword data?": {
      "main": [
        [
          {
            "node": "Insert Keyword Ranking",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "table contains target keyword data?1": {
      "main": [
        [
          {
            "node": "Insert Base Performance",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "table contains target keyword data?2": {
      "main": [
        [
          {
            "node": "Insert Position Distribution",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "table contains target keyword data?3": {
      "main": [
        [
          {
            "node": "Insert Query Performance",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Set Key #5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing1": {
      "main": [
        [
          {
            "node": "Set Key #",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing2": {
      "main": [
        [
          {
            "node": "Set Key #7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing3": {
      "main": [
        [
          {
            "node": "Set Key #8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing4": {
      "main": [
        [
          {
            "node": "Set Key #4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing5": {
      "main": [
        [
          {
            "node": "Set Key #6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Remove Duplicated Questions",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Title & Meta Description Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "content-optimisation-data": {
      "main": [
        [
          {
            "node": "Content Optimization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read competitor's  analysis": {
      "ai_tool": [
        [
          {
            "node": "Article Analysis",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Parse Data": {
      "main": [
        [
          {
            "node": "Merge Workflow Data1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Set Key #17": {
      "main": [
        [
          {
            "node": "Merge Workflow Data1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Set Key #18": {
      "main": [
        [
          {
            "node": "Merge Workflow Data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4a620583-d45a-4582-8302-1ce87b46313a",
  "meta": {
    "instanceId": "ee4f831b3b78b5daa734cbe779afb73f8c034e25dd9dee40b425fdcd64ee0092"
  },
  "id": "RtRIZFh51vbLyOEJ",
  "tags": []
}
